/* 
 * SCILL API
 *
 * SCILL gives you the tools to activate, retain and grow your user base in your app or game by bringing you features well known in the gaming industry: Gamification. We take care of the services and technology involved so you can focus on your game and content.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: support@scillgame.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = SCILL.Client.SwaggerDateConverter;

namespace SCILL.Model
{
    /// <summary>
    /// Requesting an access token requires this object to be sent containing the user id of your user. The user id can be anything (we dont care) but it must be consistent for the lifetime of the user.
    /// </summary>
    [DataContract]
        public partial class ForeignUserIdentifier :  IEquatable<ForeignUserIdentifier>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ForeignUserIdentifier" /> class.
        /// </summary>
        /// <param name="userId">Any string allowed, this is the foreign user identifier that has no relation in the SCILL database and the user is unkown to SCILL. (required).</param>
        public ForeignUserIdentifier(string userId = default(string))
        {
            // to ensure "userId" is required (not null)
            if (userId == null)
            {
                throw new InvalidDataException("userId is a required property for ForeignUserIdentifier and cannot be null");
            }
            else
            {
                this.user_id = userId;
            }
        }
        
        /// <summary>
        /// Any string allowed, this is the foreign user identifier that has no relation in the SCILL database and the user is unkown to SCILL.
        /// </summary>
        /// <value>Any string allowed, this is the foreign user identifier that has no relation in the SCILL database and the user is unkown to SCILL.</value>
        [DataMember(Name="user_id", EmitDefaultValue=false)]
        public string user_id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ForeignUserIdentifier {\n");
            sb.Append("  user_id: ").Append(user_id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ForeignUserIdentifier);
        }

        /// <summary>
        /// Returns true if ForeignUserIdentifier instances are equal
        /// </summary>
        /// <param name="input">Instance of ForeignUserIdentifier to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ForeignUserIdentifier input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.user_id == input.user_id ||
                    (this.user_id != null &&
                    this.user_id.Equals(input.user_id))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.user_id != null)
                    hashCode = hashCode * 59 + this.user_id.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
