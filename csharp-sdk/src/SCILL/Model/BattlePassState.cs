/* 
 * SCILL API
 *
 * SCILL gives you the tools to activate, retain and grow your user base in your app or game by bringing you features well known in the gaming industry: Gamification. We take care of the services and technology involved so you can focus on your game and content.
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@scillgame.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = SCILL.Client.SwaggerDateConverter;

namespace SCILL.Model
{
    /// <summary>
    /// This object holds some basic info about lifetime of a battle pass and is used in expired notifications.
    /// </summary>
    [DataContract]
        public partial class BattlePassState :  IEquatable<BattlePassState>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BattlePassState" /> class.
        /// </summary>
        /// <param name="battlePassId">The unique id of this battle pass..</param>
        /// <param name="appId">The unique id of the app.</param>
        /// <param name="battlePassPriority">The priority of the battle pass. I.e. if multiple are available you can use this field to sort them..</param>
        /// <param name="startDate">The date (in iso format) when the Battle Pass starts. Tracking begins once this date is passed..</param>
        /// <param name="endDate">The date (in iso format) when the Battle Pass ends. Tracking stops once the end is reached and users will not be able to progress further than what they have achieved up to that point..</param>
        /// <param name="isActive">Indicated if this battle pass is active..</param>
        public BattlePassState(string battlePassId = default(string), string appId = default(string), int? battlePassPriority = default(int?), string startDate = default(string), string endDate = default(string), bool? isActive = default(bool?))
        {
            this.battle_pass_id = battlePassId;
            this.app_id = appId;
            this.battle_pass_priority = battlePassPriority;
            this.start_date = startDate;
            this.end_date = endDate;
            this.is_active = isActive;
        }
        
        /// <summary>
        /// The unique id of this battle pass.
        /// </summary>
        /// <value>The unique id of this battle pass.</value>
        [DataMember(Name="battle_pass_id", EmitDefaultValue=false)]
        public string battle_pass_id { get; set; }

        /// <summary>
        /// The unique id of the app
        /// </summary>
        /// <value>The unique id of the app</value>
        [DataMember(Name="app_id", EmitDefaultValue=false)]
        public string app_id { get; set; }

        /// <summary>
        /// The priority of the battle pass. I.e. if multiple are available you can use this field to sort them.
        /// </summary>
        /// <value>The priority of the battle pass. I.e. if multiple are available you can use this field to sort them.</value>
        [DataMember(Name="battle_pass_priority", EmitDefaultValue=false)]
        public int? battle_pass_priority { get; set; }

        /// <summary>
        /// The date (in iso format) when the Battle Pass starts. Tracking begins once this date is passed.
        /// </summary>
        /// <value>The date (in iso format) when the Battle Pass starts. Tracking begins once this date is passed.</value>
        [DataMember(Name="start_date", EmitDefaultValue=false)]
        public string start_date { get; set; }

        /// <summary>
        /// The date (in iso format) when the Battle Pass ends. Tracking stops once the end is reached and users will not be able to progress further than what they have achieved up to that point.
        /// </summary>
        /// <value>The date (in iso format) when the Battle Pass ends. Tracking stops once the end is reached and users will not be able to progress further than what they have achieved up to that point.</value>
        [DataMember(Name="end_date", EmitDefaultValue=false)]
        public string end_date { get; set; }

        /// <summary>
        /// Indicated if this battle pass is active.
        /// </summary>
        /// <value>Indicated if this battle pass is active.</value>
        [DataMember(Name="is_active", EmitDefaultValue=false)]
        public bool? is_active { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BattlePassState {\n");
            sb.Append("  battle_pass_id: ").Append(battle_pass_id).Append("\n");
            sb.Append("  app_id: ").Append(app_id).Append("\n");
            sb.Append("  battle_pass_priority: ").Append(battle_pass_priority).Append("\n");
            sb.Append("  start_date: ").Append(start_date).Append("\n");
            sb.Append("  end_date: ").Append(end_date).Append("\n");
            sb.Append("  is_active: ").Append(is_active).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BattlePassState);
        }

        /// <summary>
        /// Returns true if BattlePassState instances are equal
        /// </summary>
        /// <param name="input">Instance of BattlePassState to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BattlePassState input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.battle_pass_id == input.battle_pass_id ||
                    (this.battle_pass_id != null &&
                    this.battle_pass_id.Equals(input.battle_pass_id))
                ) && 
                (
                    this.app_id == input.app_id ||
                    (this.app_id != null &&
                    this.app_id.Equals(input.app_id))
                ) && 
                (
                    this.battle_pass_priority == input.battle_pass_priority ||
                    (this.battle_pass_priority != null &&
                    this.battle_pass_priority.Equals(input.battle_pass_priority))
                ) && 
                (
                    this.start_date == input.start_date ||
                    (this.start_date != null &&
                    this.start_date.Equals(input.start_date))
                ) && 
                (
                    this.end_date == input.end_date ||
                    (this.end_date != null &&
                    this.end_date.Equals(input.end_date))
                ) && 
                (
                    this.is_active == input.is_active ||
                    (this.is_active != null &&
                    this.is_active.Equals(input.is_active))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.battle_pass_id != null)
                    hashCode = hashCode * 59 + this.battle_pass_id.GetHashCode();
                if (this.app_id != null)
                    hashCode = hashCode * 59 + this.app_id.GetHashCode();
                if (this.battle_pass_priority != null)
                    hashCode = hashCode * 59 + this.battle_pass_priority.GetHashCode();
                if (this.start_date != null)
                    hashCode = hashCode * 59 + this.start_date.GetHashCode();
                if (this.end_date != null)
                    hashCode = hashCode * 59 + this.end_date.GetHashCode();
                if (this.is_active != null)
                    hashCode = hashCode * 59 + this.is_active.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
