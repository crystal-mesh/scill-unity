/* 
 * SCILL API
 *
 * SCILL gives you the tools to activate, retain and grow your user base in your app or game by bringing you features well known in the gaming industry: Gamification. We take care of the services and technology involved so you can focus on your game and content.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@scillgame.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = SCILL.Client.SwaggerDateConverter;

namespace SCILL.Model
{
    /// <summary>
    /// This payload is sent in Webhooks and notifications as part of the battlepass-challenge-changed notification. The idea is to provide enough information to quickly update UI or implementing backend logic. We provide both the state of the object before it changed, and after that. This allows you to react in many different ways.
    /// </summary>
    [DataContract]
        public partial class BattlePassChallengeChangedPayload :  IEquatable<BattlePassChallengeChangedPayload>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BattlePassChallengeChangedPayload" /> class.
        /// </summary>
        /// <param name="webhookType">The type of the notification. If you receive this payload, it&#x27;s most likely battlepass-challenge-changed.</param>
        /// <param name="oldBattlePassChallenge">oldBattlePassChallenge.</param>
        /// <param name="newBattlePassChallenge">newBattlePassChallenge.</param>
        public BattlePassChallengeChangedPayload(string webhookType = default(string), BattlePassChallengeState oldBattlePassChallenge = default(BattlePassChallengeState), BattlePassChallengeState newBattlePassChallenge = default(BattlePassChallengeState))
        {
            this.webhook_type = webhookType;
            this.old_battle_pass_challenge = oldBattlePassChallenge;
            this.new_battle_pass_challenge = newBattlePassChallenge;
        }
        
        /// <summary>
        /// The type of the notification. If you receive this payload, it&#x27;s most likely battlepass-challenge-changed
        /// </summary>
        /// <value>The type of the notification. If you receive this payload, it&#x27;s most likely battlepass-challenge-changed</value>
        [DataMember(Name="webhook_type", EmitDefaultValue=false)]
        public string webhook_type { get; set; }

        /// <summary>
        /// Gets or Sets old_battle_pass_challenge
        /// </summary>
        [DataMember(Name="old_battle_pass_challenge", EmitDefaultValue=false)]
        public BattlePassChallengeState old_battle_pass_challenge { get; set; }

        /// <summary>
        /// Gets or Sets new_battle_pass_challenge
        /// </summary>
        [DataMember(Name="new_battle_pass_challenge", EmitDefaultValue=false)]
        public BattlePassChallengeState new_battle_pass_challenge { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BattlePassChallengeChangedPayload {\n");
            sb.Append("  webhook_type: ").Append(webhook_type).Append("\n");
            sb.Append("  old_battle_pass_challenge: ").Append(old_battle_pass_challenge).Append("\n");
            sb.Append("  new_battle_pass_challenge: ").Append(new_battle_pass_challenge).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BattlePassChallengeChangedPayload);
        }

        /// <summary>
        /// Returns true if BattlePassChallengeChangedPayload instances are equal
        /// </summary>
        /// <param name="input">Instance of BattlePassChallengeChangedPayload to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BattlePassChallengeChangedPayload input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.webhook_type == input.webhook_type ||
                    (this.webhook_type != null &&
                    this.webhook_type.Equals(input.webhook_type))
                ) && 
                (
                    this.old_battle_pass_challenge == input.old_battle_pass_challenge ||
                    (this.old_battle_pass_challenge != null &&
                    this.old_battle_pass_challenge.Equals(input.old_battle_pass_challenge))
                ) && 
                (
                    this.new_battle_pass_challenge == input.new_battle_pass_challenge ||
                    (this.new_battle_pass_challenge != null &&
                    this.new_battle_pass_challenge.Equals(input.new_battle_pass_challenge))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.webhook_type != null)
                    hashCode = hashCode * 59 + this.webhook_type.GetHashCode();
                if (this.old_battle_pass_challenge != null)
                    hashCode = hashCode * 59 + this.old_battle_pass_challenge.GetHashCode();
                if (this.new_battle_pass_challenge != null)
                    hashCode = hashCode * 59 + this.new_battle_pass_challenge.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
