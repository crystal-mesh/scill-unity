/* 
 * SCILL API
 *
 * SCILL gives you the tools to activate, retain and grow your user base in your app or game by bringing you features well known in the gaming industry: Gamification. We take care of the services and technology involved so you can focus on your game and content.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: support@scillgame.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = SCILL.Client.SwaggerDateConverter;

namespace SCILL.Model
{
    /// <summary>
    /// Standard response for actions like update or delete. If anything went fine, you&#x27;ll receive a HTTP code of 200 and a OK message.
    /// </summary>
    [DataContract]
        public partial class ActionResponse :  IEquatable<ActionResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ActionResponse" /> class.
        /// </summary>
        /// <param name="status">HTTP status code (required).</param>
        /// <param name="message">message (required).</param>
        /// <param name="challenge">challenge.</param>
        public ActionResponse(int? status = default(int?), string message = default(string), Challenge challenge = default(Challenge))
        {
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new InvalidDataException("status is a required property for ActionResponse and cannot be null");
            }
            else
            {
                this.status = status;
            }
            // to ensure "message" is required (not null)
            if (message == null)
            {
                throw new InvalidDataException("message is a required property for ActionResponse and cannot be null");
            }
            else
            {
                this.message = message;
            }
            this.challenge = challenge;
        }
        
        /// <summary>
        /// HTTP status code
        /// </summary>
        /// <value>HTTP status code</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public int? status { get; set; }

        /// <summary>
        /// Gets or Sets message
        /// </summary>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string message { get; set; }

        /// <summary>
        /// Gets or Sets challenge
        /// </summary>
        [DataMember(Name="challenge", EmitDefaultValue=false)]
        public Challenge challenge { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ActionResponse {\n");
            sb.Append("  status: ").Append(status).Append("\n");
            sb.Append("  message: ").Append(message).Append("\n");
            sb.Append("  challenge: ").Append(challenge).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ActionResponse);
        }

        /// <summary>
        /// Returns true if ActionResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ActionResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ActionResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.status == input.status ||
                    (this.status != null &&
                    this.status.Equals(input.status))
                ) && 
                (
                    this.message == input.message ||
                    (this.message != null &&
                    this.message.Equals(input.message))
                ) && 
                (
                    this.challenge == input.challenge ||
                    (this.challenge != null &&
                    this.challenge.Equals(input.challenge))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.status != null)
                    hashCode = hashCode * 59 + this.status.GetHashCode();
                if (this.message != null)
                    hashCode = hashCode * 59 + this.message.GetHashCode();
                if (this.challenge != null)
                    hashCode = hashCode * 59 + this.challenge.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
