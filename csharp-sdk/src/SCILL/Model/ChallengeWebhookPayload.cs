/* 
 * SCILL API
 *
 * SCILL gives you the tools to activate, retain and grow your user base in your app or game by bringing you features well known in the gaming industry: Gamification. We take care of the services and technology involved so you can focus on your game and content.
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@scillgame.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = SCILL.Client.SwaggerDateConverter;

namespace SCILL.Model
{
    /// <summary>
    /// The payload sent to the users webhook.
    /// </summary>
    [DataContract]
        public partial class ChallengeWebhookPayload :  IEquatable<ChallengeWebhookPayload>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChallengeWebhookPayload" /> class.
        /// </summary>
        /// <param name="webhookType">The type of the webhook. Depending on the module, there are different webhook types indicating different events. Check the reference documentation to see all types..</param>
        /// <param name="categoryPosition">The index of the category this challenge is linked to. When you request personal challenges, you get an array of categories which contain an array of challenges in their challenges property. This value indicates in which category this challenge can be found. Speeds up updating UI as you don&#x27;t need to iterate through all catagories and challenges to find the challenge..</param>
        /// <param name="userToken">The access token for the user of that challenge. You can use that user_token to directly send another event and therefore to chain different SCILL pieces together. For example you can send another event driving another challenge or battle pass whenever a user has completed a challenge..</param>
        /// <param name="newChallenge">newChallenge.</param>
        /// <param name="oldChallenge">oldChallenge.</param>
        public ChallengeWebhookPayload(string webhookType = default(string), decimal? categoryPosition = default(decimal?), string userToken = default(string), Challenge newChallenge = default(Challenge), Challenge oldChallenge = default(Challenge))
        {
            this.webhook_type = webhookType;
            this.category_position = categoryPosition;
            this.user_token = userToken;
            this.new_challenge = newChallenge;
            this.old_challenge = oldChallenge;
        }
        
        /// <summary>
        /// The type of the webhook. Depending on the module, there are different webhook types indicating different events. Check the reference documentation to see all types.
        /// </summary>
        /// <value>The type of the webhook. Depending on the module, there are different webhook types indicating different events. Check the reference documentation to see all types.</value>
        [DataMember(Name="webhook_type", EmitDefaultValue=false)]
        public string webhook_type { get; set; }

        /// <summary>
        /// The index of the category this challenge is linked to. When you request personal challenges, you get an array of categories which contain an array of challenges in their challenges property. This value indicates in which category this challenge can be found. Speeds up updating UI as you don&#x27;t need to iterate through all catagories and challenges to find the challenge.
        /// </summary>
        /// <value>The index of the category this challenge is linked to. When you request personal challenges, you get an array of categories which contain an array of challenges in their challenges property. This value indicates in which category this challenge can be found. Speeds up updating UI as you don&#x27;t need to iterate through all catagories and challenges to find the challenge.</value>
        [DataMember(Name="category_position", EmitDefaultValue=false)]
        public decimal? category_position { get; set; }

        /// <summary>
        /// The access token for the user of that challenge. You can use that user_token to directly send another event and therefore to chain different SCILL pieces together. For example you can send another event driving another challenge or battle pass whenever a user has completed a challenge.
        /// </summary>
        /// <value>The access token for the user of that challenge. You can use that user_token to directly send another event and therefore to chain different SCILL pieces together. For example you can send another event driving another challenge or battle pass whenever a user has completed a challenge.</value>
        [DataMember(Name="user_token", EmitDefaultValue=false)]
        public string user_token { get; set; }

        /// <summary>
        /// Gets or Sets new_challenge
        /// </summary>
        [DataMember(Name="new_challenge", EmitDefaultValue=false)]
        public Challenge new_challenge { get; set; }

        /// <summary>
        /// Gets or Sets old_challenge
        /// </summary>
        [DataMember(Name="old_challenge", EmitDefaultValue=false)]
        public Challenge old_challenge { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChallengeWebhookPayload {\n");
            sb.Append("  webhook_type: ").Append(webhook_type).Append("\n");
            sb.Append("  category_position: ").Append(category_position).Append("\n");
            sb.Append("  user_token: ").Append(user_token).Append("\n");
            sb.Append("  new_challenge: ").Append(new_challenge).Append("\n");
            sb.Append("  old_challenge: ").Append(old_challenge).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChallengeWebhookPayload);
        }

        /// <summary>
        /// Returns true if ChallengeWebhookPayload instances are equal
        /// </summary>
        /// <param name="input">Instance of ChallengeWebhookPayload to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChallengeWebhookPayload input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.webhook_type == input.webhook_type ||
                    (this.webhook_type != null &&
                    this.webhook_type.Equals(input.webhook_type))
                ) && 
                (
                    this.category_position == input.category_position ||
                    (this.category_position != null &&
                    this.category_position.Equals(input.category_position))
                ) && 
                (
                    this.user_token == input.user_token ||
                    (this.user_token != null &&
                    this.user_token.Equals(input.user_token))
                ) && 
                (
                    this.new_challenge == input.new_challenge ||
                    (this.new_challenge != null &&
                    this.new_challenge.Equals(input.new_challenge))
                ) && 
                (
                    this.old_challenge == input.old_challenge ||
                    (this.old_challenge != null &&
                    this.old_challenge.Equals(input.old_challenge))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.webhook_type != null)
                    hashCode = hashCode * 59 + this.webhook_type.GetHashCode();
                if (this.category_position != null)
                    hashCode = hashCode * 59 + this.category_position.GetHashCode();
                if (this.user_token != null)
                    hashCode = hashCode * 59 + this.user_token.GetHashCode();
                if (this.new_challenge != null)
                    hashCode = hashCode * 59 + this.new_challenge.GetHashCode();
                if (this.old_challenge != null)
                    hashCode = hashCode * 59 + this.old_challenge.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
