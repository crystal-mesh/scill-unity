/* 
 * SCILL API
 *
 * SCILL gives you the tools to activate, retain and grow your user base in your app or game by bringing you features well known in the gaming industry: Gamification. We take care of the services and technology involved so you can focus on your game and content.
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@scillgame.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = SCILL.Client.SwaggerDateConverter;

namespace SCILL.Model
{
    /// <summary>
    /// BattlePassTranslation
    /// </summary>
    [DataContract]
        public partial class BattlePassTranslation :  IEquatable<BattlePassTranslation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BattlePassTranslation" /> class.
        /// </summary>
        /// <param name="languageId">The id of the language.</param>
        /// <param name="name">The name of the Battle Pass in the local language set in the request (see Setting Language). In the admin panel you can either create HTML content or plain text..</param>
        /// <param name="description">The description of the Battle Pass in the local language set in the request (see Setting Language). In the admin panel you can either create HTML content or plain text..</param>
        /// <param name="shortDescription">A short description in the local language you can use to teaser battle passes or implement “expand for more” functionality..</param>
        /// <param name="disclaimer">Use this to provide some terms and conditions following along this battle passes purchase..</param>
        public BattlePassTranslation(string languageId = default(string), string name = default(string), string description = default(string), string shortDescription = default(string), string disclaimer = default(string))
        {
            this.language_id = languageId;
            this.name = name;
            this.description = description;
            this.short_description = shortDescription;
            this.disclaimer = disclaimer;
        }
        
        /// <summary>
        /// The id of the language
        /// </summary>
        /// <value>The id of the language</value>
        [DataMember(Name="language_id", EmitDefaultValue=false)]
        public string language_id { get; set; }

        /// <summary>
        /// The name of the Battle Pass in the local language set in the request (see Setting Language). In the admin panel you can either create HTML content or plain text.
        /// </summary>
        /// <value>The name of the Battle Pass in the local language set in the request (see Setting Language). In the admin panel you can either create HTML content or plain text.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string name { get; set; }

        /// <summary>
        /// The description of the Battle Pass in the local language set in the request (see Setting Language). In the admin panel you can either create HTML content or plain text.
        /// </summary>
        /// <value>The description of the Battle Pass in the local language set in the request (see Setting Language). In the admin panel you can either create HTML content or plain text.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string description { get; set; }

        /// <summary>
        /// A short description in the local language you can use to teaser battle passes or implement “expand for more” functionality.
        /// </summary>
        /// <value>A short description in the local language you can use to teaser battle passes or implement “expand for more” functionality.</value>
        [DataMember(Name="short_description", EmitDefaultValue=false)]
        public string short_description { get; set; }

        /// <summary>
        /// Use this to provide some terms and conditions following along this battle passes purchase.
        /// </summary>
        /// <value>Use this to provide some terms and conditions following along this battle passes purchase.</value>
        [DataMember(Name="disclaimer", EmitDefaultValue=false)]
        public string disclaimer { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BattlePassTranslation {\n");
            sb.Append("  language_id: ").Append(language_id).Append("\n");
            sb.Append("  name: ").Append(name).Append("\n");
            sb.Append("  description: ").Append(description).Append("\n");
            sb.Append("  short_description: ").Append(short_description).Append("\n");
            sb.Append("  disclaimer: ").Append(disclaimer).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BattlePassTranslation);
        }

        /// <summary>
        /// Returns true if BattlePassTranslation instances are equal
        /// </summary>
        /// <param name="input">Instance of BattlePassTranslation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BattlePassTranslation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.language_id == input.language_id ||
                    (this.language_id != null &&
                    this.language_id.Equals(input.language_id))
                ) && 
                (
                    this.name == input.name ||
                    (this.name != null &&
                    this.name.Equals(input.name))
                ) && 
                (
                    this.description == input.description ||
                    (this.description != null &&
                    this.description.Equals(input.description))
                ) && 
                (
                    this.short_description == input.short_description ||
                    (this.short_description != null &&
                    this.short_description.Equals(input.short_description))
                ) && 
                (
                    this.disclaimer == input.disclaimer ||
                    (this.disclaimer != null &&
                    this.disclaimer.Equals(input.disclaimer))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.language_id != null)
                    hashCode = hashCode * 59 + this.language_id.GetHashCode();
                if (this.name != null)
                    hashCode = hashCode * 59 + this.name.GetHashCode();
                if (this.description != null)
                    hashCode = hashCode * 59 + this.description.GetHashCode();
                if (this.short_description != null)
                    hashCode = hashCode * 59 + this.short_description.GetHashCode();
                if (this.disclaimer != null)
                    hashCode = hashCode * 59 + this.disclaimer.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
