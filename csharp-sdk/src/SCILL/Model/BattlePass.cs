/* 
 * SCILL API
 *
 * SCILL gives you the tools to activate, retain and grow your user base in your app or game by bringing you features well known in the gaming industry: Gamification. We take care of the services and technology involved so you can focus on your game and content.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: support@scillgame.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = SCILL.Client.SwaggerDateConverter;

namespace SCILL.Model
{
    /// <summary>
    /// A Battle Pass is a structured layer above challenges and handles the lifecycle of challenges based on a level system. Users need to fullfil challenges to unlock the next level. Each level can have a reward that you can specify in the BattlePassLevel structure. Battle Passes need to be unlocked before they start tracking progress.
    /// </summary>
    [DataContract]
        public partial class BattlePass :  IEquatable<BattlePass>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BattlePass" /> class.
        /// </summary>
        /// <param name="battlePassId">The unique id of this battle pass..</param>
        /// <param name="appId">The unique id of the app.</param>
        /// <param name="battlePassName">The name of the battle bass. You can set that in the Admin Panel. The language is set with the query parameter language. See documentation for more info on that..</param>
        /// <param name="battlePassDescription">The description of the battle bass. You can set that in the Admin Panel and it can also be HTML. The language is set with the query parameter language. See documentation for more info on that..</param>
        /// <param name="battlePassShortDescription">A short description of the battle bass. You can set that in the Admin Panel and it can also be HTML. The language is set with the query parameter language. See documentation for more info on that..</param>
        /// <param name="battlePassDisclaimer">Use this to provide some terms and conditions following along this battle passes purchase..</param>
        /// <param name="battlePassPriority">The priority of the battle pass. I.e. if multiple are available you can use this field to sort them..</param>
        /// <param name="packageSkuIos">If you want to sell Battle Passes you can use this field to trigger in-app purchase products within your mobile app. You can set this value in the Admin Panel. This one is for iOS..</param>
        /// <param name="packageSkuAndroid">If you want to sell Battle Passes you can use this field to trigger in-app purchase products within your mobile app. You can set this value in the Admin Panel. Use this to set the package string for Android..</param>
        /// <param name="imageXs">The xs sized image name or url. You can determine the best size distribution yourself and depends on your application or UI.</param>
        /// <param name="imageS">The s sized image name or url. You can determine the best size distribution yourself and depends on your application or UI.</param>
        /// <param name="imageM">The m sized image name or url. You can determine the best size distribution yourself and depends on your application or UI.</param>
        /// <param name="imageL">The l sized image name or url. You can determine the best size distribution yourself and depends on your application or UI.</param>
        /// <param name="imageXl">The xl sized image name or url. You can determine the best size distribution yourself and depends on your application or UI.</param>
        /// <param name="startDate">The date (in iso format) when the Battle Pass starts. Tracking begins once this date is passed..</param>
        /// <param name="endDate">The date (in iso format) when the Battle Pass ends. Tracking stops once the end is reached and users will not be able to progress further than what they have achieved up to that point..</param>
        /// <param name="readMoreLink">If the Battle Pass costs “money” you may want to route the user to a web site/page, where they can learn more about this battle pass. You can also use this field to route the user inside your application by providing a path or whatever works for you..</param>
        /// <param name="isUnlockedIncrementally">Indicates if one level after the other must be activated or if users can activate whichever level they want. Typically battle passes are unlocked level by level, but if battle passes are used for other applications (like user referal programs) it can be useful to set this to false..</param>
        /// <param name="isActive">Indicated if this battle pass is active..</param>
        /// <param name="unlockedAt">The date in iso format when the user unlocked this Battle Pass..</param>
        /// <param name="canPurchaseWithMoney">Indicates that this Battle Pass can be purchased via in-app purchase. This can be set in the Admin Panel..</param>
        /// <param name="canPurchaseWithCoins">Indicates that this Battle Pass can be purchased with SCILL Coins. This can be set in the Admin Panel..</param>
        public BattlePass(string battlePassId = default(string), string appId = default(string), string battlePassName = default(string), string battlePassDescription = default(string), string battlePassShortDescription = default(string), string battlePassDisclaimer = default(string), int? battlePassPriority = default(int?), string packageSkuIos = default(string), string packageSkuAndroid = default(string), string imageXs = default(string), string imageS = default(string), string imageM = default(string), string imageL = default(string), string imageXl = default(string), string startDate = default(string), string endDate = default(string), string readMoreLink = default(string), bool? isUnlockedIncrementally = default(bool?), bool? isActive = default(bool?), string unlockedAt = default(string), bool? canPurchaseWithMoney = default(bool?), bool? canPurchaseWithCoins = default(bool?))
        {
            this.battle_pass_id = battlePassId;
            this.app_id = appId;
            this.battle_pass_name = battlePassName;
            this.battle_pass_description = battlePassDescription;
            this.battle_pass_short_description = battlePassShortDescription;
            this.battle_pass_disclaimer = battlePassDisclaimer;
            this.battle_pass_priority = battlePassPriority;
            this.package_sku_ios = packageSkuIos;
            this.package_sku_android = packageSkuAndroid;
            this.image_xs = imageXs;
            this.image_s = imageS;
            this.image_m = imageM;
            this.image_l = imageL;
            this.image_xl = imageXl;
            this.start_date = startDate;
            this.end_date = endDate;
            this.read_more_link = readMoreLink;
            this.is_unlocked_incrementally = isUnlockedIncrementally;
            this.is_active = isActive;
            this.unlocked_at = unlockedAt;
            this.can_purchase_with_money = canPurchaseWithMoney;
            this.can_purchase_with_coins = canPurchaseWithCoins;
        }
        
        /// <summary>
        /// The unique id of this battle pass.
        /// </summary>
        /// <value>The unique id of this battle pass.</value>
        [DataMember(Name="battle_pass_id", EmitDefaultValue=false)]
        public string battle_pass_id { get; set; }

        /// <summary>
        /// The unique id of the app
        /// </summary>
        /// <value>The unique id of the app</value>
        [DataMember(Name="app_id", EmitDefaultValue=false)]
        public string app_id { get; set; }

        /// <summary>
        /// The name of the battle bass. You can set that in the Admin Panel. The language is set with the query parameter language. See documentation for more info on that.
        /// </summary>
        /// <value>The name of the battle bass. You can set that in the Admin Panel. The language is set with the query parameter language. See documentation for more info on that.</value>
        [DataMember(Name="battle_pass_name", EmitDefaultValue=false)]
        public string battle_pass_name { get; set; }

        /// <summary>
        /// The description of the battle bass. You can set that in the Admin Panel and it can also be HTML. The language is set with the query parameter language. See documentation for more info on that.
        /// </summary>
        /// <value>The description of the battle bass. You can set that in the Admin Panel and it can also be HTML. The language is set with the query parameter language. See documentation for more info on that.</value>
        [DataMember(Name="battle_pass_description", EmitDefaultValue=false)]
        public string battle_pass_description { get; set; }

        /// <summary>
        /// A short description of the battle bass. You can set that in the Admin Panel and it can also be HTML. The language is set with the query parameter language. See documentation for more info on that.
        /// </summary>
        /// <value>A short description of the battle bass. You can set that in the Admin Panel and it can also be HTML. The language is set with the query parameter language. See documentation for more info on that.</value>
        [DataMember(Name="battle_pass_short_description", EmitDefaultValue=false)]
        public string battle_pass_short_description { get; set; }

        /// <summary>
        /// Use this to provide some terms and conditions following along this battle passes purchase.
        /// </summary>
        /// <value>Use this to provide some terms and conditions following along this battle passes purchase.</value>
        [DataMember(Name="battle_pass_disclaimer", EmitDefaultValue=false)]
        public string battle_pass_disclaimer { get; set; }

        /// <summary>
        /// The priority of the battle pass. I.e. if multiple are available you can use this field to sort them.
        /// </summary>
        /// <value>The priority of the battle pass. I.e. if multiple are available you can use this field to sort them.</value>
        [DataMember(Name="battle_pass_priority", EmitDefaultValue=false)]
        public int? battle_pass_priority { get; set; }

        /// <summary>
        /// If you want to sell Battle Passes you can use this field to trigger in-app purchase products within your mobile app. You can set this value in the Admin Panel. This one is for iOS.
        /// </summary>
        /// <value>If you want to sell Battle Passes you can use this field to trigger in-app purchase products within your mobile app. You can set this value in the Admin Panel. This one is for iOS.</value>
        [DataMember(Name="package_sku_ios", EmitDefaultValue=false)]
        public string package_sku_ios { get; set; }

        /// <summary>
        /// If you want to sell Battle Passes you can use this field to trigger in-app purchase products within your mobile app. You can set this value in the Admin Panel. Use this to set the package string for Android.
        /// </summary>
        /// <value>If you want to sell Battle Passes you can use this field to trigger in-app purchase products within your mobile app. You can set this value in the Admin Panel. Use this to set the package string for Android.</value>
        [DataMember(Name="package_sku_android", EmitDefaultValue=false)]
        public string package_sku_android { get; set; }

        /// <summary>
        /// The xs sized image name or url. You can determine the best size distribution yourself and depends on your application or UI
        /// </summary>
        /// <value>The xs sized image name or url. You can determine the best size distribution yourself and depends on your application or UI</value>
        [DataMember(Name="image_xs", EmitDefaultValue=false)]
        public string image_xs { get; set; }

        /// <summary>
        /// The s sized image name or url. You can determine the best size distribution yourself and depends on your application or UI
        /// </summary>
        /// <value>The s sized image name or url. You can determine the best size distribution yourself and depends on your application or UI</value>
        [DataMember(Name="image_s", EmitDefaultValue=false)]
        public string image_s { get; set; }

        /// <summary>
        /// The m sized image name or url. You can determine the best size distribution yourself and depends on your application or UI
        /// </summary>
        /// <value>The m sized image name or url. You can determine the best size distribution yourself and depends on your application or UI</value>
        [DataMember(Name="image_m", EmitDefaultValue=false)]
        public string image_m { get; set; }

        /// <summary>
        /// The l sized image name or url. You can determine the best size distribution yourself and depends on your application or UI
        /// </summary>
        /// <value>The l sized image name or url. You can determine the best size distribution yourself and depends on your application or UI</value>
        [DataMember(Name="image_l", EmitDefaultValue=false)]
        public string image_l { get; set; }

        /// <summary>
        /// The xl sized image name or url. You can determine the best size distribution yourself and depends on your application or UI
        /// </summary>
        /// <value>The xl sized image name or url. You can determine the best size distribution yourself and depends on your application or UI</value>
        [DataMember(Name="image_xl", EmitDefaultValue=false)]
        public string image_xl { get; set; }

        /// <summary>
        /// The date (in iso format) when the Battle Pass starts. Tracking begins once this date is passed.
        /// </summary>
        /// <value>The date (in iso format) when the Battle Pass starts. Tracking begins once this date is passed.</value>
        [DataMember(Name="start_date", EmitDefaultValue=false)]
        public string start_date { get; set; }

        /// <summary>
        /// The date (in iso format) when the Battle Pass ends. Tracking stops once the end is reached and users will not be able to progress further than what they have achieved up to that point.
        /// </summary>
        /// <value>The date (in iso format) when the Battle Pass ends. Tracking stops once the end is reached and users will not be able to progress further than what they have achieved up to that point.</value>
        [DataMember(Name="end_date", EmitDefaultValue=false)]
        public string end_date { get; set; }

        /// <summary>
        /// If the Battle Pass costs “money” you may want to route the user to a web site/page, where they can learn more about this battle pass. You can also use this field to route the user inside your application by providing a path or whatever works for you.
        /// </summary>
        /// <value>If the Battle Pass costs “money” you may want to route the user to a web site/page, where they can learn more about this battle pass. You can also use this field to route the user inside your application by providing a path or whatever works for you.</value>
        [DataMember(Name="read_more_link", EmitDefaultValue=false)]
        public string read_more_link { get; set; }

        /// <summary>
        /// Indicates if one level after the other must be activated or if users can activate whichever level they want. Typically battle passes are unlocked level by level, but if battle passes are used for other applications (like user referal programs) it can be useful to set this to false.
        /// </summary>
        /// <value>Indicates if one level after the other must be activated or if users can activate whichever level they want. Typically battle passes are unlocked level by level, but if battle passes are used for other applications (like user referal programs) it can be useful to set this to false.</value>
        [DataMember(Name="is_unlocked_incrementally", EmitDefaultValue=false)]
        public bool? is_unlocked_incrementally { get; set; }

        /// <summary>
        /// Indicated if this battle pass is active.
        /// </summary>
        /// <value>Indicated if this battle pass is active.</value>
        [DataMember(Name="is_active", EmitDefaultValue=false)]
        public bool? is_active { get; set; }

        /// <summary>
        /// The date in iso format when the user unlocked this Battle Pass.
        /// </summary>
        /// <value>The date in iso format when the user unlocked this Battle Pass.</value>
        [DataMember(Name="unlocked_at", EmitDefaultValue=false)]
        public string unlocked_at { get; set; }

        /// <summary>
        /// Indicates that this Battle Pass can be purchased via in-app purchase. This can be set in the Admin Panel.
        /// </summary>
        /// <value>Indicates that this Battle Pass can be purchased via in-app purchase. This can be set in the Admin Panel.</value>
        [DataMember(Name="can_purchase_with_money", EmitDefaultValue=false)]
        public bool? can_purchase_with_money { get; set; }

        /// <summary>
        /// Indicates that this Battle Pass can be purchased with SCILL Coins. This can be set in the Admin Panel.
        /// </summary>
        /// <value>Indicates that this Battle Pass can be purchased with SCILL Coins. This can be set in the Admin Panel.</value>
        [DataMember(Name="can_purchase_with_coins", EmitDefaultValue=false)]
        public bool? can_purchase_with_coins { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BattlePass {\n");
            sb.Append("  battle_pass_id: ").Append(battle_pass_id).Append("\n");
            sb.Append("  app_id: ").Append(app_id).Append("\n");
            sb.Append("  battle_pass_name: ").Append(battle_pass_name).Append("\n");
            sb.Append("  battle_pass_description: ").Append(battle_pass_description).Append("\n");
            sb.Append("  battle_pass_short_description: ").Append(battle_pass_short_description).Append("\n");
            sb.Append("  battle_pass_disclaimer: ").Append(battle_pass_disclaimer).Append("\n");
            sb.Append("  battle_pass_priority: ").Append(battle_pass_priority).Append("\n");
            sb.Append("  package_sku_ios: ").Append(package_sku_ios).Append("\n");
            sb.Append("  package_sku_android: ").Append(package_sku_android).Append("\n");
            sb.Append("  image_xs: ").Append(image_xs).Append("\n");
            sb.Append("  image_s: ").Append(image_s).Append("\n");
            sb.Append("  image_m: ").Append(image_m).Append("\n");
            sb.Append("  image_l: ").Append(image_l).Append("\n");
            sb.Append("  image_xl: ").Append(image_xl).Append("\n");
            sb.Append("  start_date: ").Append(start_date).Append("\n");
            sb.Append("  end_date: ").Append(end_date).Append("\n");
            sb.Append("  read_more_link: ").Append(read_more_link).Append("\n");
            sb.Append("  is_unlocked_incrementally: ").Append(is_unlocked_incrementally).Append("\n");
            sb.Append("  is_active: ").Append(is_active).Append("\n");
            sb.Append("  unlocked_at: ").Append(unlocked_at).Append("\n");
            sb.Append("  can_purchase_with_money: ").Append(can_purchase_with_money).Append("\n");
            sb.Append("  can_purchase_with_coins: ").Append(can_purchase_with_coins).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BattlePass);
        }

        /// <summary>
        /// Returns true if BattlePass instances are equal
        /// </summary>
        /// <param name="input">Instance of BattlePass to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BattlePass input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.battle_pass_id == input.battle_pass_id ||
                    (this.battle_pass_id != null &&
                    this.battle_pass_id.Equals(input.battle_pass_id))
                ) && 
                (
                    this.app_id == input.app_id ||
                    (this.app_id != null &&
                    this.app_id.Equals(input.app_id))
                ) && 
                (
                    this.battle_pass_name == input.battle_pass_name ||
                    (this.battle_pass_name != null &&
                    this.battle_pass_name.Equals(input.battle_pass_name))
                ) && 
                (
                    this.battle_pass_description == input.battle_pass_description ||
                    (this.battle_pass_description != null &&
                    this.battle_pass_description.Equals(input.battle_pass_description))
                ) && 
                (
                    this.battle_pass_short_description == input.battle_pass_short_description ||
                    (this.battle_pass_short_description != null &&
                    this.battle_pass_short_description.Equals(input.battle_pass_short_description))
                ) && 
                (
                    this.battle_pass_disclaimer == input.battle_pass_disclaimer ||
                    (this.battle_pass_disclaimer != null &&
                    this.battle_pass_disclaimer.Equals(input.battle_pass_disclaimer))
                ) && 
                (
                    this.battle_pass_priority == input.battle_pass_priority ||
                    (this.battle_pass_priority != null &&
                    this.battle_pass_priority.Equals(input.battle_pass_priority))
                ) && 
                (
                    this.package_sku_ios == input.package_sku_ios ||
                    (this.package_sku_ios != null &&
                    this.package_sku_ios.Equals(input.package_sku_ios))
                ) && 
                (
                    this.package_sku_android == input.package_sku_android ||
                    (this.package_sku_android != null &&
                    this.package_sku_android.Equals(input.package_sku_android))
                ) && 
                (
                    this.image_xs == input.image_xs ||
                    (this.image_xs != null &&
                    this.image_xs.Equals(input.image_xs))
                ) && 
                (
                    this.image_s == input.image_s ||
                    (this.image_s != null &&
                    this.image_s.Equals(input.image_s))
                ) && 
                (
                    this.image_m == input.image_m ||
                    (this.image_m != null &&
                    this.image_m.Equals(input.image_m))
                ) && 
                (
                    this.image_l == input.image_l ||
                    (this.image_l != null &&
                    this.image_l.Equals(input.image_l))
                ) && 
                (
                    this.image_xl == input.image_xl ||
                    (this.image_xl != null &&
                    this.image_xl.Equals(input.image_xl))
                ) && 
                (
                    this.start_date == input.start_date ||
                    (this.start_date != null &&
                    this.start_date.Equals(input.start_date))
                ) && 
                (
                    this.end_date == input.end_date ||
                    (this.end_date != null &&
                    this.end_date.Equals(input.end_date))
                ) && 
                (
                    this.read_more_link == input.read_more_link ||
                    (this.read_more_link != null &&
                    this.read_more_link.Equals(input.read_more_link))
                ) && 
                (
                    this.is_unlocked_incrementally == input.is_unlocked_incrementally ||
                    (this.is_unlocked_incrementally != null &&
                    this.is_unlocked_incrementally.Equals(input.is_unlocked_incrementally))
                ) && 
                (
                    this.is_active == input.is_active ||
                    (this.is_active != null &&
                    this.is_active.Equals(input.is_active))
                ) && 
                (
                    this.unlocked_at == input.unlocked_at ||
                    (this.unlocked_at != null &&
                    this.unlocked_at.Equals(input.unlocked_at))
                ) && 
                (
                    this.can_purchase_with_money == input.can_purchase_with_money ||
                    (this.can_purchase_with_money != null &&
                    this.can_purchase_with_money.Equals(input.can_purchase_with_money))
                ) && 
                (
                    this.can_purchase_with_coins == input.can_purchase_with_coins ||
                    (this.can_purchase_with_coins != null &&
                    this.can_purchase_with_coins.Equals(input.can_purchase_with_coins))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.battle_pass_id != null)
                    hashCode = hashCode * 59 + this.battle_pass_id.GetHashCode();
                if (this.app_id != null)
                    hashCode = hashCode * 59 + this.app_id.GetHashCode();
                if (this.battle_pass_name != null)
                    hashCode = hashCode * 59 + this.battle_pass_name.GetHashCode();
                if (this.battle_pass_description != null)
                    hashCode = hashCode * 59 + this.battle_pass_description.GetHashCode();
                if (this.battle_pass_short_description != null)
                    hashCode = hashCode * 59 + this.battle_pass_short_description.GetHashCode();
                if (this.battle_pass_disclaimer != null)
                    hashCode = hashCode * 59 + this.battle_pass_disclaimer.GetHashCode();
                if (this.battle_pass_priority != null)
                    hashCode = hashCode * 59 + this.battle_pass_priority.GetHashCode();
                if (this.package_sku_ios != null)
                    hashCode = hashCode * 59 + this.package_sku_ios.GetHashCode();
                if (this.package_sku_android != null)
                    hashCode = hashCode * 59 + this.package_sku_android.GetHashCode();
                if (this.image_xs != null)
                    hashCode = hashCode * 59 + this.image_xs.GetHashCode();
                if (this.image_s != null)
                    hashCode = hashCode * 59 + this.image_s.GetHashCode();
                if (this.image_m != null)
                    hashCode = hashCode * 59 + this.image_m.GetHashCode();
                if (this.image_l != null)
                    hashCode = hashCode * 59 + this.image_l.GetHashCode();
                if (this.image_xl != null)
                    hashCode = hashCode * 59 + this.image_xl.GetHashCode();
                if (this.start_date != null)
                    hashCode = hashCode * 59 + this.start_date.GetHashCode();
                if (this.end_date != null)
                    hashCode = hashCode * 59 + this.end_date.GetHashCode();
                if (this.read_more_link != null)
                    hashCode = hashCode * 59 + this.read_more_link.GetHashCode();
                if (this.is_unlocked_incrementally != null)
                    hashCode = hashCode * 59 + this.is_unlocked_incrementally.GetHashCode();
                if (this.is_active != null)
                    hashCode = hashCode * 59 + this.is_active.GetHashCode();
                if (this.unlocked_at != null)
                    hashCode = hashCode * 59 + this.unlocked_at.GetHashCode();
                if (this.can_purchase_with_money != null)
                    hashCode = hashCode * 59 + this.can_purchase_with_money.GetHashCode();
                if (this.can_purchase_with_coins != null)
                    hashCode = hashCode * 59 + this.can_purchase_with_coins.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
