/* 
 * SCILL API
 *
 * SCILL gives you the tools to activate, retain and grow your user base in your app or game by bringing you features well known in the gaming industry: Gamification. We take care of the services and technology involved so you can focus on your game and content.
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@scillgame.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = SCILL.Client.SwaggerDateConverter;

namespace SCILL.Model
{
    /// <summary>
    /// Payload sent via Webhook or realtime notifications whenever a usrs level reward has been claimed. Use this payload to unlock the item for the specified user.
    /// </summary>
    [DataContract]
        public partial class BattlePassLevelClaimedPayload :  IEquatable<BattlePassLevelClaimedPayload>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BattlePassLevelClaimedPayload" /> class.
        /// </summary>
        /// <param name="webhookType">The type of the notification. If you receive this payload, it&#x27;s most likely battlepass-level-reward-claimed.</param>
        /// <param name="battlePassLevelRewardClaimed">battlePassLevelRewardClaimed.</param>
        public BattlePassLevelClaimedPayload(string webhookType = default(string), BattlePassLevelReward battlePassLevelRewardClaimed = default(BattlePassLevelReward))
        {
            this.webhook_type = webhookType;
            this.battle_pass_level_reward_claimed = battlePassLevelRewardClaimed;
        }
        
        /// <summary>
        /// The type of the notification. If you receive this payload, it&#x27;s most likely battlepass-level-reward-claimed
        /// </summary>
        /// <value>The type of the notification. If you receive this payload, it&#x27;s most likely battlepass-level-reward-claimed</value>
        [DataMember(Name="webhook_type", EmitDefaultValue=false)]
        public string webhook_type { get; set; }

        /// <summary>
        /// Gets or Sets battle_pass_level_reward_claimed
        /// </summary>
        [DataMember(Name="battle_pass_level_reward_claimed", EmitDefaultValue=false)]
        public BattlePassLevelReward battle_pass_level_reward_claimed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BattlePassLevelClaimedPayload {\n");
            sb.Append("  webhook_type: ").Append(webhook_type).Append("\n");
            sb.Append("  battle_pass_level_reward_claimed: ").Append(battle_pass_level_reward_claimed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BattlePassLevelClaimedPayload);
        }

        /// <summary>
        /// Returns true if BattlePassLevelClaimedPayload instances are equal
        /// </summary>
        /// <param name="input">Instance of BattlePassLevelClaimedPayload to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BattlePassLevelClaimedPayload input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.webhook_type == input.webhook_type ||
                    (this.webhook_type != null &&
                    this.webhook_type.Equals(input.webhook_type))
                ) && 
                (
                    this.battle_pass_level_reward_claimed == input.battle_pass_level_reward_claimed ||
                    (this.battle_pass_level_reward_claimed != null &&
                    this.battle_pass_level_reward_claimed.Equals(input.battle_pass_level_reward_claimed))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.webhook_type != null)
                    hashCode = hashCode * 59 + this.webhook_type.GetHashCode();
                if (this.battle_pass_level_reward_claimed != null)
                    hashCode = hashCode * 59 + this.battle_pass_level_reward_claimed.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
