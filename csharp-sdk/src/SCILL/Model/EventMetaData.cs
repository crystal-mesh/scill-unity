/* 
 * SCILL API
 *
 * SCILL gives you the tools to activate, retain and grow your user base in your app or game by bringing you features well known in the gaming industry: Gamification. We take care of the services and technology involved so you can focus on your game and content.
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@scillgame.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = SCILL.Client.SwaggerDateConverter;

namespace SCILL.Model
{
    /// <summary>
    /// This holds metadata and is specific to each event type. Please have a look at the documentation to learn which properties need to be set for the event-type you want to send.
    /// </summary>
    [DataContract]
        public partial class EventMetaData :  IEquatable<EventMetaData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EventMetaData" /> class.
        /// </summary>
        /// <param name="actionObject">The object that is the source of the action.</param>
        /// <param name="actionSubject">The object that is the target of the action.</param>
        /// <param name="actionType">The name of the action.</param>
        /// <param name="ammoUsed">Number of ammonition used.</param>
        /// <param name="amount">A general indicator for number of items (i.e. number of kills in kill-enemy event).</param>
        /// <param name="amountGained">The number of ammonition gained.</param>
        /// <param name="amountGiven">The number of amminition given.</param>
        /// <param name="animalName">The name of an animal.</param>
        /// <param name="armor">The \&quot;health\&quot; state of the armor.</param>
        /// <param name="awayTeamId">The id of the opponent team.</param>
        /// <param name="awayScore">The score of the opponent team.</param>
        /// <param name="battleStatus">An integer value indicating the battle status (map it to an enum for example in your code).</param>
        /// <param name="bountyName">The name of the bounty.</param>
        /// <param name="buildingId">The id or name of a building.</param>
        /// <param name="buildingLevel">The level of the building.</param>
        /// <param name="cardType">The name of the card.</param>
        /// <param name="characterName">The name of a character.</param>
        /// <param name="checkpointId">The id/name of a checkpint.</param>
        /// <param name="coordinateX">The x coordinate in your coordinate system, used for example to store position on a map.</param>
        /// <param name="coordinateY">The y coordinate in your coordinate system, used for example to store position on a map.</param>
        /// <param name="crewName">The name of a crew.</param>
        /// <param name="damageAmount">The amount of damage.</param>
        /// <param name="distance">The distance measured in any coordinate system of your choice. Please note: This is an integer field. If you need more precision multiple your floating point value with 1000 or so to keep the precision but storing it as an integer value.</param>
        /// <param name="duration">The duration in any unit you like.</param>
        /// <param name="effectId">The effect id or name.</param>
        /// <param name="enemyCharacter">The character type or name of an enemy.</param>
        /// <param name="enemyType">The type of an enemy.</param>
        /// <param name="eventType">The event type.</param>
        /// <param name="fuelConsumed">The number of fuel consumed.</param>
        /// <param name="health">The health.</param>
        /// <param name="hitType">The type of a hit (i.e. head, torso, leg).</param>
        /// <param name="homeTeamId">The id or name of your or the home team.</param>
        /// <param name="homeScore">The score of your or the home team.</param>
        /// <param name="itemId">The id of an item.</param>
        /// <param name="itemName">The name of an item.</param>
        /// <param name="itemType">The type of an item.</param>
        /// <param name="killType">The type of a kill.</param>
        /// <param name="lapPosition">The position in a lap.</param>
        /// <param name="levelId">The id of the level.</param>
        /// <param name="mapName">The name of a map.</param>
        /// <param name="mapSectionName">The name of a section of a map.</param>
        /// <param name="missionId">The mission id.</param>
        /// <param name="playerCharacter">The name of the player character.</param>
        /// <param name="puzzleId">The id of a puzzle.</param>
        /// <param name="racePosition">The position within a race.</param>
        /// <param name="realm">The realm.</param>
        /// <param name="requiredTime">The time required involed in this event. I.e. in a reach-checkpoint event this could be the time in seconds required to reach that checkpoint from the last checkpoint..</param>
        /// <param name="resourceGained">The name/id of the resource gained.</param>
        /// <param name="resourceGiven">The name/id of the resource given (to someone else).</param>
        /// <param name="resourceName">The name of the resource.</param>
        /// <param name="roundId">The id of the round.</param>
        /// <param name="roundType">The type of the round.</param>
        /// <param name="score">The score.</param>
        /// <param name="statType">The type of the stats item.</param>
        /// <param name="timeCondition">The timing condition.</param>
        /// <param name="transportId">The id of the transport.</param>
        /// <param name="type">The name/id of a type.</param>
        /// <param name="unitType">The name/id of a unit type.</param>
        /// <param name="upgradeType">The name of the upgrade.</param>
        /// <param name="weaponAction">The action taken on a weapon (i.e. infrared-activated).</param>
        /// <param name="weaponId">The id of the weapon.</param>
        /// <param name="weaponType">The type of the weapon.</param>
        /// <param name="weaponUsed">The name/id of a weapon used in a kill or similar event.</param>
        /// <param name="zoneName">The name of the zone.</param>
        public EventMetaData(string actionObject = default(string), string actionSubject = default(string), string actionType = default(string), int? ammoUsed = default(int?), int? amount = default(int?), int? amountGained = default(int?), int? amountGiven = default(int?), string animalName = default(string), int? armor = default(int?), string awayTeamId = default(string), int? awayScore = default(int?), int? battleStatus = default(int?), string bountyName = default(string), string buildingId = default(string), int? buildingLevel = default(int?), string cardType = default(string), string characterName = default(string), string checkpointId = default(string), int? coordinateX = default(int?), int? coordinateY = default(int?), string crewName = default(string), int? damageAmount = default(int?), int? distance = default(int?), int? duration = default(int?), string effectId = default(string), string enemyCharacter = default(string), string enemyType = default(string), string eventType = default(string), int? fuelConsumed = default(int?), int? health = default(int?), string hitType = default(string), string homeTeamId = default(string), int? homeScore = default(int?), string itemId = default(string), string itemName = default(string), string itemType = default(string), string killType = default(string), int? lapPosition = default(int?), string levelId = default(string), string mapName = default(string), string mapSectionName = default(string), string missionId = default(string), string playerCharacter = default(string), int? puzzleId = default(int?), int? racePosition = default(int?), string realm = default(string), int? requiredTime = default(int?), string resourceGained = default(string), string resourceGiven = default(string), string resourceName = default(string), int? roundId = default(int?), string roundType = default(string), int? score = default(int?), string statType = default(string), string timeCondition = default(string), string transportId = default(string), string type = default(string), string unitType = default(string), string upgradeType = default(string), string weaponAction = default(string), string weaponId = default(string), string weaponType = default(string), string weaponUsed = default(string), string zoneName = default(string))
        {
            this.action_object = actionObject;
            this.action_subject = actionSubject;
            this.action_type = actionType;
            this.ammo_used = ammoUsed;
            this.amount = amount;
            this.amount_gained = amountGained;
            this.amount_given = amountGiven;
            this.animal_name = animalName;
            this.armor = armor;
            this.away_team_id = awayTeamId;
            this.away_score = awayScore;
            this.battle_status = battleStatus;
            this.bounty_name = bountyName;
            this.building_id = buildingId;
            this.building_level = buildingLevel;
            this.card_type = cardType;
            this.character_name = characterName;
            this.checkpoint_id = checkpointId;
            this.coordinate_x = coordinateX;
            this.coordinate_y = coordinateY;
            this.crew_name = crewName;
            this.damage_amount = damageAmount;
            this.distance = distance;
            this.duration = duration;
            this.effect_id = effectId;
            this.enemy_character = enemyCharacter;
            this.enemy_type = enemyType;
            this.event_type = eventType;
            this.fuel_consumed = fuelConsumed;
            this.health = health;
            this.hit_type = hitType;
            this.home_team_id = homeTeamId;
            this.home_score = homeScore;
            this.item_id = itemId;
            this.item_name = itemName;
            this.item_type = itemType;
            this.kill_type = killType;
            this.lap_position = lapPosition;
            this.level_id = levelId;
            this.map_name = mapName;
            this.map_section_name = mapSectionName;
            this.mission_id = missionId;
            this.player_character = playerCharacter;
            this.puzzle_id = puzzleId;
            this.race_position = racePosition;
            this.realm = realm;
            this.required_time = requiredTime;
            this.resource_gained = resourceGained;
            this.resource_given = resourceGiven;
            this.resource_name = resourceName;
            this.round_id = roundId;
            this.round_type = roundType;
            this.score = score;
            this.stat_type = statType;
            this.time_condition = timeCondition;
            this.transport_id = transportId;
            this.type = type;
            this.unit_type = unitType;
            this.upgrade_type = upgradeType;
            this.weapon_action = weaponAction;
            this.weapon_id = weaponId;
            this.weapon_type = weaponType;
            this.weapon_used = weaponUsed;
            this.zone_name = zoneName;
        }
        
        /// <summary>
        /// The object that is the source of the action
        /// </summary>
        /// <value>The object that is the source of the action</value>
        [DataMember(Name="action_object", EmitDefaultValue=false)]
        public string action_object { get; set; }

        /// <summary>
        /// The object that is the target of the action
        /// </summary>
        /// <value>The object that is the target of the action</value>
        [DataMember(Name="action_subject", EmitDefaultValue=false)]
        public string action_subject { get; set; }

        /// <summary>
        /// The name of the action
        /// </summary>
        /// <value>The name of the action</value>
        [DataMember(Name="action_type", EmitDefaultValue=false)]
        public string action_type { get; set; }

        /// <summary>
        /// Number of ammonition used
        /// </summary>
        /// <value>Number of ammonition used</value>
        [DataMember(Name="ammo_used", EmitDefaultValue=false)]
        public int? ammo_used { get; set; }

        /// <summary>
        /// A general indicator for number of items (i.e. number of kills in kill-enemy event)
        /// </summary>
        /// <value>A general indicator for number of items (i.e. number of kills in kill-enemy event)</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public int? amount { get; set; }

        /// <summary>
        /// The number of ammonition gained
        /// </summary>
        /// <value>The number of ammonition gained</value>
        [DataMember(Name="amount_gained", EmitDefaultValue=false)]
        public int? amount_gained { get; set; }

        /// <summary>
        /// The number of amminition given
        /// </summary>
        /// <value>The number of amminition given</value>
        [DataMember(Name="amount_given", EmitDefaultValue=false)]
        public int? amount_given { get; set; }

        /// <summary>
        /// The name of an animal
        /// </summary>
        /// <value>The name of an animal</value>
        [DataMember(Name="animal_name", EmitDefaultValue=false)]
        public string animal_name { get; set; }

        /// <summary>
        /// The \&quot;health\&quot; state of the armor
        /// </summary>
        /// <value>The \&quot;health\&quot; state of the armor</value>
        [DataMember(Name="armor", EmitDefaultValue=false)]
        public int? armor { get; set; }

        /// <summary>
        /// The id of the opponent team
        /// </summary>
        /// <value>The id of the opponent team</value>
        [DataMember(Name="away_team_id", EmitDefaultValue=false)]
        public string away_team_id { get; set; }

        /// <summary>
        /// The score of the opponent team
        /// </summary>
        /// <value>The score of the opponent team</value>
        [DataMember(Name="away_score", EmitDefaultValue=false)]
        public int? away_score { get; set; }

        /// <summary>
        /// An integer value indicating the battle status (map it to an enum for example in your code)
        /// </summary>
        /// <value>An integer value indicating the battle status (map it to an enum for example in your code)</value>
        [DataMember(Name="battle_status", EmitDefaultValue=false)]
        public int? battle_status { get; set; }

        /// <summary>
        /// The name of the bounty
        /// </summary>
        /// <value>The name of the bounty</value>
        [DataMember(Name="bounty_name", EmitDefaultValue=false)]
        public string bounty_name { get; set; }

        /// <summary>
        /// The id or name of a building
        /// </summary>
        /// <value>The id or name of a building</value>
        [DataMember(Name="building_id", EmitDefaultValue=false)]
        public string building_id { get; set; }

        /// <summary>
        /// The level of the building
        /// </summary>
        /// <value>The level of the building</value>
        [DataMember(Name="building_level", EmitDefaultValue=false)]
        public int? building_level { get; set; }

        /// <summary>
        /// The name of the card
        /// </summary>
        /// <value>The name of the card</value>
        [DataMember(Name="card_type", EmitDefaultValue=false)]
        public string card_type { get; set; }

        /// <summary>
        /// The name of a character
        /// </summary>
        /// <value>The name of a character</value>
        [DataMember(Name="character_name", EmitDefaultValue=false)]
        public string character_name { get; set; }

        /// <summary>
        /// The id/name of a checkpint
        /// </summary>
        /// <value>The id/name of a checkpint</value>
        [DataMember(Name="checkpoint_id", EmitDefaultValue=false)]
        public string checkpoint_id { get; set; }

        /// <summary>
        /// The x coordinate in your coordinate system, used for example to store position on a map
        /// </summary>
        /// <value>The x coordinate in your coordinate system, used for example to store position on a map</value>
        [DataMember(Name="coordinate_x", EmitDefaultValue=false)]
        public int? coordinate_x { get; set; }

        /// <summary>
        /// The y coordinate in your coordinate system, used for example to store position on a map
        /// </summary>
        /// <value>The y coordinate in your coordinate system, used for example to store position on a map</value>
        [DataMember(Name="coordinate_y", EmitDefaultValue=false)]
        public int? coordinate_y { get; set; }

        /// <summary>
        /// The name of a crew
        /// </summary>
        /// <value>The name of a crew</value>
        [DataMember(Name="crew_name", EmitDefaultValue=false)]
        public string crew_name { get; set; }

        /// <summary>
        /// The amount of damage
        /// </summary>
        /// <value>The amount of damage</value>
        [DataMember(Name="damage_amount", EmitDefaultValue=false)]
        public int? damage_amount { get; set; }

        /// <summary>
        /// The distance measured in any coordinate system of your choice. Please note: This is an integer field. If you need more precision multiple your floating point value with 1000 or so to keep the precision but storing it as an integer value
        /// </summary>
        /// <value>The distance measured in any coordinate system of your choice. Please note: This is an integer field. If you need more precision multiple your floating point value with 1000 or so to keep the precision but storing it as an integer value</value>
        [DataMember(Name="distance", EmitDefaultValue=false)]
        public int? distance { get; set; }

        /// <summary>
        /// The duration in any unit you like
        /// </summary>
        /// <value>The duration in any unit you like</value>
        [DataMember(Name="duration", EmitDefaultValue=false)]
        public int? duration { get; set; }

        /// <summary>
        /// The effect id or name
        /// </summary>
        /// <value>The effect id or name</value>
        [DataMember(Name="effect_id", EmitDefaultValue=false)]
        public string effect_id { get; set; }

        /// <summary>
        /// The character type or name of an enemy
        /// </summary>
        /// <value>The character type or name of an enemy</value>
        [DataMember(Name="enemy_character", EmitDefaultValue=false)]
        public string enemy_character { get; set; }

        /// <summary>
        /// The type of an enemy
        /// </summary>
        /// <value>The type of an enemy</value>
        [DataMember(Name="enemy_type", EmitDefaultValue=false)]
        public string enemy_type { get; set; }

        /// <summary>
        /// The event type
        /// </summary>
        /// <value>The event type</value>
        [DataMember(Name="event_type", EmitDefaultValue=false)]
        public string event_type { get; set; }

        /// <summary>
        /// The number of fuel consumed
        /// </summary>
        /// <value>The number of fuel consumed</value>
        [DataMember(Name="fuel_consumed", EmitDefaultValue=false)]
        public int? fuel_consumed { get; set; }

        /// <summary>
        /// The health
        /// </summary>
        /// <value>The health</value>
        [DataMember(Name="health", EmitDefaultValue=false)]
        public int? health { get; set; }

        /// <summary>
        /// The type of a hit (i.e. head, torso, leg)
        /// </summary>
        /// <value>The type of a hit (i.e. head, torso, leg)</value>
        [DataMember(Name="hit_type", EmitDefaultValue=false)]
        public string hit_type { get; set; }

        /// <summary>
        /// The id or name of your or the home team
        /// </summary>
        /// <value>The id or name of your or the home team</value>
        [DataMember(Name="home_team_id", EmitDefaultValue=false)]
        public string home_team_id { get; set; }

        /// <summary>
        /// The score of your or the home team
        /// </summary>
        /// <value>The score of your or the home team</value>
        [DataMember(Name="home_score", EmitDefaultValue=false)]
        public int? home_score { get; set; }

        /// <summary>
        /// The id of an item
        /// </summary>
        /// <value>The id of an item</value>
        [DataMember(Name="item_id", EmitDefaultValue=false)]
        public string item_id { get; set; }

        /// <summary>
        /// The name of an item
        /// </summary>
        /// <value>The name of an item</value>
        [DataMember(Name="item_name", EmitDefaultValue=false)]
        public string item_name { get; set; }

        /// <summary>
        /// The type of an item
        /// </summary>
        /// <value>The type of an item</value>
        [DataMember(Name="item_type", EmitDefaultValue=false)]
        public string item_type { get; set; }

        /// <summary>
        /// The type of a kill
        /// </summary>
        /// <value>The type of a kill</value>
        [DataMember(Name="kill_type", EmitDefaultValue=false)]
        public string kill_type { get; set; }

        /// <summary>
        /// The position in a lap
        /// </summary>
        /// <value>The position in a lap</value>
        [DataMember(Name="lap_position", EmitDefaultValue=false)]
        public int? lap_position { get; set; }

        /// <summary>
        /// The id of the level
        /// </summary>
        /// <value>The id of the level</value>
        [DataMember(Name="level_id", EmitDefaultValue=false)]
        public string level_id { get; set; }

        /// <summary>
        /// The name of a map
        /// </summary>
        /// <value>The name of a map</value>
        [DataMember(Name="map_name", EmitDefaultValue=false)]
        public string map_name { get; set; }

        /// <summary>
        /// The name of a section of a map
        /// </summary>
        /// <value>The name of a section of a map</value>
        [DataMember(Name="map_section_name", EmitDefaultValue=false)]
        public string map_section_name { get; set; }

        /// <summary>
        /// The mission id
        /// </summary>
        /// <value>The mission id</value>
        [DataMember(Name="mission_id", EmitDefaultValue=false)]
        public string mission_id { get; set; }

        /// <summary>
        /// The name of the player character
        /// </summary>
        /// <value>The name of the player character</value>
        [DataMember(Name="player_character", EmitDefaultValue=false)]
        public string player_character { get; set; }

        /// <summary>
        /// The id of a puzzle
        /// </summary>
        /// <value>The id of a puzzle</value>
        [DataMember(Name="puzzle_id", EmitDefaultValue=false)]
        public int? puzzle_id { get; set; }

        /// <summary>
        /// The position within a race
        /// </summary>
        /// <value>The position within a race</value>
        [DataMember(Name="race_position", EmitDefaultValue=false)]
        public int? race_position { get; set; }

        /// <summary>
        /// The realm
        /// </summary>
        /// <value>The realm</value>
        [DataMember(Name="realm", EmitDefaultValue=false)]
        public string realm { get; set; }

        /// <summary>
        /// The time required involed in this event. I.e. in a reach-checkpoint event this could be the time in seconds required to reach that checkpoint from the last checkpoint.
        /// </summary>
        /// <value>The time required involed in this event. I.e. in a reach-checkpoint event this could be the time in seconds required to reach that checkpoint from the last checkpoint.</value>
        [DataMember(Name="required_time", EmitDefaultValue=false)]
        public int? required_time { get; set; }

        /// <summary>
        /// The name/id of the resource gained
        /// </summary>
        /// <value>The name/id of the resource gained</value>
        [DataMember(Name="resource_gained", EmitDefaultValue=false)]
        public string resource_gained { get; set; }

        /// <summary>
        /// The name/id of the resource given (to someone else)
        /// </summary>
        /// <value>The name/id of the resource given (to someone else)</value>
        [DataMember(Name="resource_given", EmitDefaultValue=false)]
        public string resource_given { get; set; }

        /// <summary>
        /// The name of the resource
        /// </summary>
        /// <value>The name of the resource</value>
        [DataMember(Name="resource_name", EmitDefaultValue=false)]
        public string resource_name { get; set; }

        /// <summary>
        /// The id of the round
        /// </summary>
        /// <value>The id of the round</value>
        [DataMember(Name="round_id", EmitDefaultValue=false)]
        public int? round_id { get; set; }

        /// <summary>
        /// The type of the round
        /// </summary>
        /// <value>The type of the round</value>
        [DataMember(Name="round_type", EmitDefaultValue=false)]
        public string round_type { get; set; }

        /// <summary>
        /// The score
        /// </summary>
        /// <value>The score</value>
        [DataMember(Name="score", EmitDefaultValue=false)]
        public int? score { get; set; }

        /// <summary>
        /// The type of the stats item
        /// </summary>
        /// <value>The type of the stats item</value>
        [DataMember(Name="stat_type", EmitDefaultValue=false)]
        public string stat_type { get; set; }

        /// <summary>
        /// The timing condition
        /// </summary>
        /// <value>The timing condition</value>
        [DataMember(Name="time_condition", EmitDefaultValue=false)]
        public string time_condition { get; set; }

        /// <summary>
        /// The id of the transport
        /// </summary>
        /// <value>The id of the transport</value>
        [DataMember(Name="transport_id", EmitDefaultValue=false)]
        public string transport_id { get; set; }

        /// <summary>
        /// The name/id of a type
        /// </summary>
        /// <value>The name/id of a type</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string type { get; set; }

        /// <summary>
        /// The name/id of a unit type
        /// </summary>
        /// <value>The name/id of a unit type</value>
        [DataMember(Name="unit_type", EmitDefaultValue=false)]
        public string unit_type { get; set; }

        /// <summary>
        /// The name of the upgrade
        /// </summary>
        /// <value>The name of the upgrade</value>
        [DataMember(Name="upgrade_type", EmitDefaultValue=false)]
        public string upgrade_type { get; set; }

        /// <summary>
        /// The action taken on a weapon (i.e. infrared-activated)
        /// </summary>
        /// <value>The action taken on a weapon (i.e. infrared-activated)</value>
        [DataMember(Name="weapon_action", EmitDefaultValue=false)]
        public string weapon_action { get; set; }

        /// <summary>
        /// The id of the weapon
        /// </summary>
        /// <value>The id of the weapon</value>
        [DataMember(Name="weapon_id", EmitDefaultValue=false)]
        public string weapon_id { get; set; }

        /// <summary>
        /// The type of the weapon
        /// </summary>
        /// <value>The type of the weapon</value>
        [DataMember(Name="weapon_type", EmitDefaultValue=false)]
        public string weapon_type { get; set; }

        /// <summary>
        /// The name/id of a weapon used in a kill or similar event
        /// </summary>
        /// <value>The name/id of a weapon used in a kill or similar event</value>
        [DataMember(Name="weapon_used", EmitDefaultValue=false)]
        public string weapon_used { get; set; }

        /// <summary>
        /// The name of the zone
        /// </summary>
        /// <value>The name of the zone</value>
        [DataMember(Name="zone_name", EmitDefaultValue=false)]
        public string zone_name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EventMetaData {\n");
            sb.Append("  action_object: ").Append(action_object).Append("\n");
            sb.Append("  action_subject: ").Append(action_subject).Append("\n");
            sb.Append("  action_type: ").Append(action_type).Append("\n");
            sb.Append("  ammo_used: ").Append(ammo_used).Append("\n");
            sb.Append("  amount: ").Append(amount).Append("\n");
            sb.Append("  amount_gained: ").Append(amount_gained).Append("\n");
            sb.Append("  amount_given: ").Append(amount_given).Append("\n");
            sb.Append("  animal_name: ").Append(animal_name).Append("\n");
            sb.Append("  armor: ").Append(armor).Append("\n");
            sb.Append("  away_team_id: ").Append(away_team_id).Append("\n");
            sb.Append("  away_score: ").Append(away_score).Append("\n");
            sb.Append("  battle_status: ").Append(battle_status).Append("\n");
            sb.Append("  bounty_name: ").Append(bounty_name).Append("\n");
            sb.Append("  building_id: ").Append(building_id).Append("\n");
            sb.Append("  building_level: ").Append(building_level).Append("\n");
            sb.Append("  card_type: ").Append(card_type).Append("\n");
            sb.Append("  character_name: ").Append(character_name).Append("\n");
            sb.Append("  checkpoint_id: ").Append(checkpoint_id).Append("\n");
            sb.Append("  coordinate_x: ").Append(coordinate_x).Append("\n");
            sb.Append("  coordinate_y: ").Append(coordinate_y).Append("\n");
            sb.Append("  crew_name: ").Append(crew_name).Append("\n");
            sb.Append("  damage_amount: ").Append(damage_amount).Append("\n");
            sb.Append("  distance: ").Append(distance).Append("\n");
            sb.Append("  duration: ").Append(duration).Append("\n");
            sb.Append("  effect_id: ").Append(effect_id).Append("\n");
            sb.Append("  enemy_character: ").Append(enemy_character).Append("\n");
            sb.Append("  enemy_type: ").Append(enemy_type).Append("\n");
            sb.Append("  event_type: ").Append(event_type).Append("\n");
            sb.Append("  fuel_consumed: ").Append(fuel_consumed).Append("\n");
            sb.Append("  health: ").Append(health).Append("\n");
            sb.Append("  hit_type: ").Append(hit_type).Append("\n");
            sb.Append("  home_team_id: ").Append(home_team_id).Append("\n");
            sb.Append("  home_score: ").Append(home_score).Append("\n");
            sb.Append("  item_id: ").Append(item_id).Append("\n");
            sb.Append("  item_name: ").Append(item_name).Append("\n");
            sb.Append("  item_type: ").Append(item_type).Append("\n");
            sb.Append("  kill_type: ").Append(kill_type).Append("\n");
            sb.Append("  lap_position: ").Append(lap_position).Append("\n");
            sb.Append("  level_id: ").Append(level_id).Append("\n");
            sb.Append("  map_name: ").Append(map_name).Append("\n");
            sb.Append("  map_section_name: ").Append(map_section_name).Append("\n");
            sb.Append("  mission_id: ").Append(mission_id).Append("\n");
            sb.Append("  player_character: ").Append(player_character).Append("\n");
            sb.Append("  puzzle_id: ").Append(puzzle_id).Append("\n");
            sb.Append("  race_position: ").Append(race_position).Append("\n");
            sb.Append("  realm: ").Append(realm).Append("\n");
            sb.Append("  required_time: ").Append(required_time).Append("\n");
            sb.Append("  resource_gained: ").Append(resource_gained).Append("\n");
            sb.Append("  resource_given: ").Append(resource_given).Append("\n");
            sb.Append("  resource_name: ").Append(resource_name).Append("\n");
            sb.Append("  round_id: ").Append(round_id).Append("\n");
            sb.Append("  round_type: ").Append(round_type).Append("\n");
            sb.Append("  score: ").Append(score).Append("\n");
            sb.Append("  stat_type: ").Append(stat_type).Append("\n");
            sb.Append("  time_condition: ").Append(time_condition).Append("\n");
            sb.Append("  transport_id: ").Append(transport_id).Append("\n");
            sb.Append("  type: ").Append(type).Append("\n");
            sb.Append("  unit_type: ").Append(unit_type).Append("\n");
            sb.Append("  upgrade_type: ").Append(upgrade_type).Append("\n");
            sb.Append("  weapon_action: ").Append(weapon_action).Append("\n");
            sb.Append("  weapon_id: ").Append(weapon_id).Append("\n");
            sb.Append("  weapon_type: ").Append(weapon_type).Append("\n");
            sb.Append("  weapon_used: ").Append(weapon_used).Append("\n");
            sb.Append("  zone_name: ").Append(zone_name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EventMetaData);
        }

        /// <summary>
        /// Returns true if EventMetaData instances are equal
        /// </summary>
        /// <param name="input">Instance of EventMetaData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EventMetaData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.action_object == input.action_object ||
                    (this.action_object != null &&
                    this.action_object.Equals(input.action_object))
                ) && 
                (
                    this.action_subject == input.action_subject ||
                    (this.action_subject != null &&
                    this.action_subject.Equals(input.action_subject))
                ) && 
                (
                    this.action_type == input.action_type ||
                    (this.action_type != null &&
                    this.action_type.Equals(input.action_type))
                ) && 
                (
                    this.ammo_used == input.ammo_used ||
                    (this.ammo_used != null &&
                    this.ammo_used.Equals(input.ammo_used))
                ) && 
                (
                    this.amount == input.amount ||
                    (this.amount != null &&
                    this.amount.Equals(input.amount))
                ) && 
                (
                    this.amount_gained == input.amount_gained ||
                    (this.amount_gained != null &&
                    this.amount_gained.Equals(input.amount_gained))
                ) && 
                (
                    this.amount_given == input.amount_given ||
                    (this.amount_given != null &&
                    this.amount_given.Equals(input.amount_given))
                ) && 
                (
                    this.animal_name == input.animal_name ||
                    (this.animal_name != null &&
                    this.animal_name.Equals(input.animal_name))
                ) && 
                (
                    this.armor == input.armor ||
                    (this.armor != null &&
                    this.armor.Equals(input.armor))
                ) && 
                (
                    this.away_team_id == input.away_team_id ||
                    (this.away_team_id != null &&
                    this.away_team_id.Equals(input.away_team_id))
                ) && 
                (
                    this.away_score == input.away_score ||
                    (this.away_score != null &&
                    this.away_score.Equals(input.away_score))
                ) && 
                (
                    this.battle_status == input.battle_status ||
                    (this.battle_status != null &&
                    this.battle_status.Equals(input.battle_status))
                ) && 
                (
                    this.bounty_name == input.bounty_name ||
                    (this.bounty_name != null &&
                    this.bounty_name.Equals(input.bounty_name))
                ) && 
                (
                    this.building_id == input.building_id ||
                    (this.building_id != null &&
                    this.building_id.Equals(input.building_id))
                ) && 
                (
                    this.building_level == input.building_level ||
                    (this.building_level != null &&
                    this.building_level.Equals(input.building_level))
                ) && 
                (
                    this.card_type == input.card_type ||
                    (this.card_type != null &&
                    this.card_type.Equals(input.card_type))
                ) && 
                (
                    this.character_name == input.character_name ||
                    (this.character_name != null &&
                    this.character_name.Equals(input.character_name))
                ) && 
                (
                    this.checkpoint_id == input.checkpoint_id ||
                    (this.checkpoint_id != null &&
                    this.checkpoint_id.Equals(input.checkpoint_id))
                ) && 
                (
                    this.coordinate_x == input.coordinate_x ||
                    (this.coordinate_x != null &&
                    this.coordinate_x.Equals(input.coordinate_x))
                ) && 
                (
                    this.coordinate_y == input.coordinate_y ||
                    (this.coordinate_y != null &&
                    this.coordinate_y.Equals(input.coordinate_y))
                ) && 
                (
                    this.crew_name == input.crew_name ||
                    (this.crew_name != null &&
                    this.crew_name.Equals(input.crew_name))
                ) && 
                (
                    this.damage_amount == input.damage_amount ||
                    (this.damage_amount != null &&
                    this.damage_amount.Equals(input.damage_amount))
                ) && 
                (
                    this.distance == input.distance ||
                    (this.distance != null &&
                    this.distance.Equals(input.distance))
                ) && 
                (
                    this.duration == input.duration ||
                    (this.duration != null &&
                    this.duration.Equals(input.duration))
                ) && 
                (
                    this.effect_id == input.effect_id ||
                    (this.effect_id != null &&
                    this.effect_id.Equals(input.effect_id))
                ) && 
                (
                    this.enemy_character == input.enemy_character ||
                    (this.enemy_character != null &&
                    this.enemy_character.Equals(input.enemy_character))
                ) && 
                (
                    this.enemy_type == input.enemy_type ||
                    (this.enemy_type != null &&
                    this.enemy_type.Equals(input.enemy_type))
                ) && 
                (
                    this.event_type == input.event_type ||
                    (this.event_type != null &&
                    this.event_type.Equals(input.event_type))
                ) && 
                (
                    this.fuel_consumed == input.fuel_consumed ||
                    (this.fuel_consumed != null &&
                    this.fuel_consumed.Equals(input.fuel_consumed))
                ) && 
                (
                    this.health == input.health ||
                    (this.health != null &&
                    this.health.Equals(input.health))
                ) && 
                (
                    this.hit_type == input.hit_type ||
                    (this.hit_type != null &&
                    this.hit_type.Equals(input.hit_type))
                ) && 
                (
                    this.home_team_id == input.home_team_id ||
                    (this.home_team_id != null &&
                    this.home_team_id.Equals(input.home_team_id))
                ) && 
                (
                    this.home_score == input.home_score ||
                    (this.home_score != null &&
                    this.home_score.Equals(input.home_score))
                ) && 
                (
                    this.item_id == input.item_id ||
                    (this.item_id != null &&
                    this.item_id.Equals(input.item_id))
                ) && 
                (
                    this.item_name == input.item_name ||
                    (this.item_name != null &&
                    this.item_name.Equals(input.item_name))
                ) && 
                (
                    this.item_type == input.item_type ||
                    (this.item_type != null &&
                    this.item_type.Equals(input.item_type))
                ) && 
                (
                    this.kill_type == input.kill_type ||
                    (this.kill_type != null &&
                    this.kill_type.Equals(input.kill_type))
                ) && 
                (
                    this.lap_position == input.lap_position ||
                    (this.lap_position != null &&
                    this.lap_position.Equals(input.lap_position))
                ) && 
                (
                    this.level_id == input.level_id ||
                    (this.level_id != null &&
                    this.level_id.Equals(input.level_id))
                ) && 
                (
                    this.map_name == input.map_name ||
                    (this.map_name != null &&
                    this.map_name.Equals(input.map_name))
                ) && 
                (
                    this.map_section_name == input.map_section_name ||
                    (this.map_section_name != null &&
                    this.map_section_name.Equals(input.map_section_name))
                ) && 
                (
                    this.mission_id == input.mission_id ||
                    (this.mission_id != null &&
                    this.mission_id.Equals(input.mission_id))
                ) && 
                (
                    this.player_character == input.player_character ||
                    (this.player_character != null &&
                    this.player_character.Equals(input.player_character))
                ) && 
                (
                    this.puzzle_id == input.puzzle_id ||
                    (this.puzzle_id != null &&
                    this.puzzle_id.Equals(input.puzzle_id))
                ) && 
                (
                    this.race_position == input.race_position ||
                    (this.race_position != null &&
                    this.race_position.Equals(input.race_position))
                ) && 
                (
                    this.realm == input.realm ||
                    (this.realm != null &&
                    this.realm.Equals(input.realm))
                ) && 
                (
                    this.required_time == input.required_time ||
                    (this.required_time != null &&
                    this.required_time.Equals(input.required_time))
                ) && 
                (
                    this.resource_gained == input.resource_gained ||
                    (this.resource_gained != null &&
                    this.resource_gained.Equals(input.resource_gained))
                ) && 
                (
                    this.resource_given == input.resource_given ||
                    (this.resource_given != null &&
                    this.resource_given.Equals(input.resource_given))
                ) && 
                (
                    this.resource_name == input.resource_name ||
                    (this.resource_name != null &&
                    this.resource_name.Equals(input.resource_name))
                ) && 
                (
                    this.round_id == input.round_id ||
                    (this.round_id != null &&
                    this.round_id.Equals(input.round_id))
                ) && 
                (
                    this.round_type == input.round_type ||
                    (this.round_type != null &&
                    this.round_type.Equals(input.round_type))
                ) && 
                (
                    this.score == input.score ||
                    (this.score != null &&
                    this.score.Equals(input.score))
                ) && 
                (
                    this.stat_type == input.stat_type ||
                    (this.stat_type != null &&
                    this.stat_type.Equals(input.stat_type))
                ) && 
                (
                    this.time_condition == input.time_condition ||
                    (this.time_condition != null &&
                    this.time_condition.Equals(input.time_condition))
                ) && 
                (
                    this.transport_id == input.transport_id ||
                    (this.transport_id != null &&
                    this.transport_id.Equals(input.transport_id))
                ) && 
                (
                    this.type == input.type ||
                    (this.type != null &&
                    this.type.Equals(input.type))
                ) && 
                (
                    this.unit_type == input.unit_type ||
                    (this.unit_type != null &&
                    this.unit_type.Equals(input.unit_type))
                ) && 
                (
                    this.upgrade_type == input.upgrade_type ||
                    (this.upgrade_type != null &&
                    this.upgrade_type.Equals(input.upgrade_type))
                ) && 
                (
                    this.weapon_action == input.weapon_action ||
                    (this.weapon_action != null &&
                    this.weapon_action.Equals(input.weapon_action))
                ) && 
                (
                    this.weapon_id == input.weapon_id ||
                    (this.weapon_id != null &&
                    this.weapon_id.Equals(input.weapon_id))
                ) && 
                (
                    this.weapon_type == input.weapon_type ||
                    (this.weapon_type != null &&
                    this.weapon_type.Equals(input.weapon_type))
                ) && 
                (
                    this.weapon_used == input.weapon_used ||
                    (this.weapon_used != null &&
                    this.weapon_used.Equals(input.weapon_used))
                ) && 
                (
                    this.zone_name == input.zone_name ||
                    (this.zone_name != null &&
                    this.zone_name.Equals(input.zone_name))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.action_object != null)
                    hashCode = hashCode * 59 + this.action_object.GetHashCode();
                if (this.action_subject != null)
                    hashCode = hashCode * 59 + this.action_subject.GetHashCode();
                if (this.action_type != null)
                    hashCode = hashCode * 59 + this.action_type.GetHashCode();
                if (this.ammo_used != null)
                    hashCode = hashCode * 59 + this.ammo_used.GetHashCode();
                if (this.amount != null)
                    hashCode = hashCode * 59 + this.amount.GetHashCode();
                if (this.amount_gained != null)
                    hashCode = hashCode * 59 + this.amount_gained.GetHashCode();
                if (this.amount_given != null)
                    hashCode = hashCode * 59 + this.amount_given.GetHashCode();
                if (this.animal_name != null)
                    hashCode = hashCode * 59 + this.animal_name.GetHashCode();
                if (this.armor != null)
                    hashCode = hashCode * 59 + this.armor.GetHashCode();
                if (this.away_team_id != null)
                    hashCode = hashCode * 59 + this.away_team_id.GetHashCode();
                if (this.away_score != null)
                    hashCode = hashCode * 59 + this.away_score.GetHashCode();
                if (this.battle_status != null)
                    hashCode = hashCode * 59 + this.battle_status.GetHashCode();
                if (this.bounty_name != null)
                    hashCode = hashCode * 59 + this.bounty_name.GetHashCode();
                if (this.building_id != null)
                    hashCode = hashCode * 59 + this.building_id.GetHashCode();
                if (this.building_level != null)
                    hashCode = hashCode * 59 + this.building_level.GetHashCode();
                if (this.card_type != null)
                    hashCode = hashCode * 59 + this.card_type.GetHashCode();
                if (this.character_name != null)
                    hashCode = hashCode * 59 + this.character_name.GetHashCode();
                if (this.checkpoint_id != null)
                    hashCode = hashCode * 59 + this.checkpoint_id.GetHashCode();
                if (this.coordinate_x != null)
                    hashCode = hashCode * 59 + this.coordinate_x.GetHashCode();
                if (this.coordinate_y != null)
                    hashCode = hashCode * 59 + this.coordinate_y.GetHashCode();
                if (this.crew_name != null)
                    hashCode = hashCode * 59 + this.crew_name.GetHashCode();
                if (this.damage_amount != null)
                    hashCode = hashCode * 59 + this.damage_amount.GetHashCode();
                if (this.distance != null)
                    hashCode = hashCode * 59 + this.distance.GetHashCode();
                if (this.duration != null)
                    hashCode = hashCode * 59 + this.duration.GetHashCode();
                if (this.effect_id != null)
                    hashCode = hashCode * 59 + this.effect_id.GetHashCode();
                if (this.enemy_character != null)
                    hashCode = hashCode * 59 + this.enemy_character.GetHashCode();
                if (this.enemy_type != null)
                    hashCode = hashCode * 59 + this.enemy_type.GetHashCode();
                if (this.event_type != null)
                    hashCode = hashCode * 59 + this.event_type.GetHashCode();
                if (this.fuel_consumed != null)
                    hashCode = hashCode * 59 + this.fuel_consumed.GetHashCode();
                if (this.health != null)
                    hashCode = hashCode * 59 + this.health.GetHashCode();
                if (this.hit_type != null)
                    hashCode = hashCode * 59 + this.hit_type.GetHashCode();
                if (this.home_team_id != null)
                    hashCode = hashCode * 59 + this.home_team_id.GetHashCode();
                if (this.home_score != null)
                    hashCode = hashCode * 59 + this.home_score.GetHashCode();
                if (this.item_id != null)
                    hashCode = hashCode * 59 + this.item_id.GetHashCode();
                if (this.item_name != null)
                    hashCode = hashCode * 59 + this.item_name.GetHashCode();
                if (this.item_type != null)
                    hashCode = hashCode * 59 + this.item_type.GetHashCode();
                if (this.kill_type != null)
                    hashCode = hashCode * 59 + this.kill_type.GetHashCode();
                if (this.lap_position != null)
                    hashCode = hashCode * 59 + this.lap_position.GetHashCode();
                if (this.level_id != null)
                    hashCode = hashCode * 59 + this.level_id.GetHashCode();
                if (this.map_name != null)
                    hashCode = hashCode * 59 + this.map_name.GetHashCode();
                if (this.map_section_name != null)
                    hashCode = hashCode * 59 + this.map_section_name.GetHashCode();
                if (this.mission_id != null)
                    hashCode = hashCode * 59 + this.mission_id.GetHashCode();
                if (this.player_character != null)
                    hashCode = hashCode * 59 + this.player_character.GetHashCode();
                if (this.puzzle_id != null)
                    hashCode = hashCode * 59 + this.puzzle_id.GetHashCode();
                if (this.race_position != null)
                    hashCode = hashCode * 59 + this.race_position.GetHashCode();
                if (this.realm != null)
                    hashCode = hashCode * 59 + this.realm.GetHashCode();
                if (this.required_time != null)
                    hashCode = hashCode * 59 + this.required_time.GetHashCode();
                if (this.resource_gained != null)
                    hashCode = hashCode * 59 + this.resource_gained.GetHashCode();
                if (this.resource_given != null)
                    hashCode = hashCode * 59 + this.resource_given.GetHashCode();
                if (this.resource_name != null)
                    hashCode = hashCode * 59 + this.resource_name.GetHashCode();
                if (this.round_id != null)
                    hashCode = hashCode * 59 + this.round_id.GetHashCode();
                if (this.round_type != null)
                    hashCode = hashCode * 59 + this.round_type.GetHashCode();
                if (this.score != null)
                    hashCode = hashCode * 59 + this.score.GetHashCode();
                if (this.stat_type != null)
                    hashCode = hashCode * 59 + this.stat_type.GetHashCode();
                if (this.time_condition != null)
                    hashCode = hashCode * 59 + this.time_condition.GetHashCode();
                if (this.transport_id != null)
                    hashCode = hashCode * 59 + this.transport_id.GetHashCode();
                if (this.type != null)
                    hashCode = hashCode * 59 + this.type.GetHashCode();
                if (this.unit_type != null)
                    hashCode = hashCode * 59 + this.unit_type.GetHashCode();
                if (this.upgrade_type != null)
                    hashCode = hashCode * 59 + this.upgrade_type.GetHashCode();
                if (this.weapon_action != null)
                    hashCode = hashCode * 59 + this.weapon_action.GetHashCode();
                if (this.weapon_id != null)
                    hashCode = hashCode * 59 + this.weapon_id.GetHashCode();
                if (this.weapon_type != null)
                    hashCode = hashCode * 59 + this.weapon_type.GetHashCode();
                if (this.weapon_used != null)
                    hashCode = hashCode * 59 + this.weapon_used.GetHashCode();
                if (this.zone_name != null)
                    hashCode = hashCode * 59 + this.zone_name.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
