/* 
 * SCILL API
 *
 * SCILL gives you the tools to activate, retain and grow your user base in your app or game by bringing you features well known in the gaming industry: Gamification. We take care of the services and technology involved so you can focus on your game and content.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: support@scillgame.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = SCILL.Client.SwaggerDateConverter;

namespace SCILL.Model
{
    /// <summary>
    /// This objects holds information about a battle pass reward
    /// </summary>
    [DataContract]
        public partial class BattlePassLevelReward :  IEquatable<BattlePassLevelReward>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BattlePassLevelReward" /> class.
        /// </summary>
        /// <param name="appId">The unique id of the app.</param>
        /// <param name="battlePassId">The unique id of this battle pass..</param>
        /// <param name="levelId">Unique id of this BattlePassLevel object..</param>
        /// <param name="userId">This is your user id. You can set this to whatever you like, either your real user id or an obfuscated user id. However you need to be consistent here. Events linked to this user id only track if challenges or battle passes are unlocked with the same user id..</param>
        /// <param name="levelPositionIndex">Typical usage pattern is to load battle pass levels with getBattlePassLevels operation and store them for rendering. Using this value you can quickly identify the index of the level that changed..</param>
        /// <param name="rewardAmount">In the Admin Panel you can set different types of rewards. You can also set an identifier of an in-game-item or anything you like. Use this to include the reward into your own business logic..</param>
        /// <param name="rewardTypeName">There are different types of rewards available. Possible values are Coins, Voucher, Money and Experience..</param>
        public BattlePassLevelReward(string appId = default(string), string battlePassId = default(string), string levelId = default(string), string userId = default(string), int? levelPositionIndex = default(int?), string rewardAmount = default(string), string rewardTypeName = default(string))
        {
            this.app_id = appId;
            this.battle_pass_id = battlePassId;
            this.level_id = levelId;
            this.user_id = userId;
            this.level_position_index = levelPositionIndex;
            this.reward_amount = rewardAmount;
            this.reward_type_name = rewardTypeName;
        }
        
        /// <summary>
        /// The unique id of the app
        /// </summary>
        /// <value>The unique id of the app</value>
        [DataMember(Name="app_id", EmitDefaultValue=false)]
        public string app_id { get; set; }

        /// <summary>
        /// The unique id of this battle pass.
        /// </summary>
        /// <value>The unique id of this battle pass.</value>
        [DataMember(Name="battle_pass_id", EmitDefaultValue=false)]
        public string battle_pass_id { get; set; }

        /// <summary>
        /// Unique id of this BattlePassLevel object.
        /// </summary>
        /// <value>Unique id of this BattlePassLevel object.</value>
        [DataMember(Name="level_id", EmitDefaultValue=false)]
        public string level_id { get; set; }

        /// <summary>
        /// This is your user id. You can set this to whatever you like, either your real user id or an obfuscated user id. However you need to be consistent here. Events linked to this user id only track if challenges or battle passes are unlocked with the same user id.
        /// </summary>
        /// <value>This is your user id. You can set this to whatever you like, either your real user id or an obfuscated user id. However you need to be consistent here. Events linked to this user id only track if challenges or battle passes are unlocked with the same user id.</value>
        [DataMember(Name="user_id", EmitDefaultValue=false)]
        public string user_id { get; set; }

        /// <summary>
        /// Typical usage pattern is to load battle pass levels with getBattlePassLevels operation and store them for rendering. Using this value you can quickly identify the index of the level that changed.
        /// </summary>
        /// <value>Typical usage pattern is to load battle pass levels with getBattlePassLevels operation and store them for rendering. Using this value you can quickly identify the index of the level that changed.</value>
        [DataMember(Name="level_position_index", EmitDefaultValue=false)]
        public int? level_position_index { get; set; }

        /// <summary>
        /// In the Admin Panel you can set different types of rewards. You can also set an identifier of an in-game-item or anything you like. Use this to include the reward into your own business logic.
        /// </summary>
        /// <value>In the Admin Panel you can set different types of rewards. You can also set an identifier of an in-game-item or anything you like. Use this to include the reward into your own business logic.</value>
        [DataMember(Name="reward_amount", EmitDefaultValue=false)]
        public string reward_amount { get; set; }

        /// <summary>
        /// There are different types of rewards available. Possible values are Coins, Voucher, Money and Experience.
        /// </summary>
        /// <value>There are different types of rewards available. Possible values are Coins, Voucher, Money and Experience.</value>
        [DataMember(Name="reward_type_name", EmitDefaultValue=false)]
        public string reward_type_name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BattlePassLevelReward {\n");
            sb.Append("  app_id: ").Append(app_id).Append("\n");
            sb.Append("  battle_pass_id: ").Append(battle_pass_id).Append("\n");
            sb.Append("  level_id: ").Append(level_id).Append("\n");
            sb.Append("  user_id: ").Append(user_id).Append("\n");
            sb.Append("  level_position_index: ").Append(level_position_index).Append("\n");
            sb.Append("  reward_amount: ").Append(reward_amount).Append("\n");
            sb.Append("  reward_type_name: ").Append(reward_type_name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BattlePassLevelReward);
        }

        /// <summary>
        /// Returns true if BattlePassLevelReward instances are equal
        /// </summary>
        /// <param name="input">Instance of BattlePassLevelReward to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BattlePassLevelReward input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.app_id == input.app_id ||
                    (this.app_id != null &&
                    this.app_id.Equals(input.app_id))
                ) && 
                (
                    this.battle_pass_id == input.battle_pass_id ||
                    (this.battle_pass_id != null &&
                    this.battle_pass_id.Equals(input.battle_pass_id))
                ) && 
                (
                    this.level_id == input.level_id ||
                    (this.level_id != null &&
                    this.level_id.Equals(input.level_id))
                ) && 
                (
                    this.user_id == input.user_id ||
                    (this.user_id != null &&
                    this.user_id.Equals(input.user_id))
                ) && 
                (
                    this.level_position_index == input.level_position_index ||
                    (this.level_position_index != null &&
                    this.level_position_index.Equals(input.level_position_index))
                ) && 
                (
                    this.reward_amount == input.reward_amount ||
                    (this.reward_amount != null &&
                    this.reward_amount.Equals(input.reward_amount))
                ) && 
                (
                    this.reward_type_name == input.reward_type_name ||
                    (this.reward_type_name != null &&
                    this.reward_type_name.Equals(input.reward_type_name))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.app_id != null)
                    hashCode = hashCode * 59 + this.app_id.GetHashCode();
                if (this.battle_pass_id != null)
                    hashCode = hashCode * 59 + this.battle_pass_id.GetHashCode();
                if (this.level_id != null)
                    hashCode = hashCode * 59 + this.level_id.GetHashCode();
                if (this.user_id != null)
                    hashCode = hashCode * 59 + this.user_id.GetHashCode();
                if (this.level_position_index != null)
                    hashCode = hashCode * 59 + this.level_position_index.GetHashCode();
                if (this.reward_amount != null)
                    hashCode = hashCode * 59 + this.reward_amount.GetHashCode();
                if (this.reward_type_name != null)
                    hashCode = hashCode * 59 + this.reward_type_name.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
