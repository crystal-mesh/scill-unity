/* 
 * SCILL API
 *
 * SCILL gives you the tools to activate, retain and grow your user base in your app or game by bringing you features well known in the gaming industry: Gamification. We take care of the services and technology involved so you can focus on your game and content.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@scillgame.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = SCILL.Client.SwaggerDateConverter;

namespace SCILL.Model
{
    /// <summary>
    /// Describes an available event structure
    /// </summary>
    [DataContract]
        public partial class EventDescription :  IEquatable<EventDescription>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EventDescription" /> class.
        /// </summary>
        /// <param name="eventName">The name of the event, i.e kill-enemy. This will be used in the EventPayload as event_name..</param>
        /// <param name="requiredProperties">A list of required properties - properties that must be set.</param>
        /// <param name="optionalProperties">A list of optional properties.</param>
        public EventDescription(string eventName = default(string), List<EventProperty> requiredProperties = default(List<EventProperty>), List<EventProperty> optionalProperties = default(List<EventProperty>))
        {
            this.event_name = eventName;
            this.required_properties = requiredProperties;
            this.optional_properties = optionalProperties;
        }
        
        /// <summary>
        /// The name of the event, i.e kill-enemy. This will be used in the EventPayload as event_name.
        /// </summary>
        /// <value>The name of the event, i.e kill-enemy. This will be used in the EventPayload as event_name.</value>
        [DataMember(Name="event_name", EmitDefaultValue=false)]
        public string event_name { get; set; }

        /// <summary>
        /// A list of required properties - properties that must be set
        /// </summary>
        /// <value>A list of required properties - properties that must be set</value>
        [DataMember(Name="required_properties", EmitDefaultValue=false)]
        public List<EventProperty> required_properties { get; set; }

        /// <summary>
        /// A list of optional properties
        /// </summary>
        /// <value>A list of optional properties</value>
        [DataMember(Name="optional_properties", EmitDefaultValue=false)]
        public List<EventProperty> optional_properties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EventDescription {\n");
            sb.Append("  event_name: ").Append(event_name).Append("\n");
            sb.Append("  required_properties: ").Append(required_properties).Append("\n");
            sb.Append("  optional_properties: ").Append(optional_properties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EventDescription);
        }

        /// <summary>
        /// Returns true if EventDescription instances are equal
        /// </summary>
        /// <param name="input">Instance of EventDescription to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EventDescription input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.event_name == input.event_name ||
                    (this.event_name != null &&
                    this.event_name.Equals(input.event_name))
                ) && 
                (
                    this.required_properties == input.required_properties ||
                    this.required_properties != null &&
                    input.required_properties != null &&
                    this.required_properties.SequenceEqual(input.required_properties)
                ) && 
                (
                    this.optional_properties == input.optional_properties ||
                    this.optional_properties != null &&
                    input.optional_properties != null &&
                    this.optional_properties.SequenceEqual(input.optional_properties)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.event_name != null)
                    hashCode = hashCode * 59 + this.event_name.GetHashCode();
                if (this.required_properties != null)
                    hashCode = hashCode * 59 + this.required_properties.GetHashCode();
                if (this.optional_properties != null)
                    hashCode = hashCode * 59 + this.optional_properties.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
