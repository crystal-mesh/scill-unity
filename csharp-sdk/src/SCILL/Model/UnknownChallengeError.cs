/* 
 * SCILL API
 *
 * SCILL gives you the tools to activate, retain and grow your user base in your app or game by bringing you features well known in the gaming industry: Gamification. We take care of the services and technology involved so you can focus on your game and content.
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@scillgame.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = SCILL.Client.SwaggerDateConverter;

namespace SCILL.Model
{
    /// <summary>
    /// UnknownChallengeError
    /// </summary>
    [DataContract]
        public partial class UnknownChallengeError :  IEquatable<UnknownChallengeError>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UnknownChallengeError" /> class.
        /// </summary>
        /// <param name="error">The error message.</param>
        /// <param name="errorSlug">Machine readable error message.</param>
        /// <param name="statusCode">HTTP status code of this error message&#x27;.</param>
        public UnknownChallengeError(string error = default(string), string errorSlug = default(string), int? statusCode = default(int?))
        {
            this.error = error;
            this.error_slug = errorSlug;
            this.status_code = statusCode;
        }
        
        /// <summary>
        /// The error message
        /// </summary>
        /// <value>The error message</value>
        [DataMember(Name="error", EmitDefaultValue=false)]
        public string error { get; set; }

        /// <summary>
        /// Machine readable error message
        /// </summary>
        /// <value>Machine readable error message</value>
        [DataMember(Name="error_slug", EmitDefaultValue=false)]
        public string error_slug { get; set; }

        /// <summary>
        /// HTTP status code of this error message&#x27;
        /// </summary>
        /// <value>HTTP status code of this error message&#x27;</value>
        [DataMember(Name="status_code", EmitDefaultValue=false)]
        public int? status_code { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UnknownChallengeError {\n");
            sb.Append("  error: ").Append(error).Append("\n");
            sb.Append("  error_slug: ").Append(error_slug).Append("\n");
            sb.Append("  status_code: ").Append(status_code).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UnknownChallengeError);
        }

        /// <summary>
        /// Returns true if UnknownChallengeError instances are equal
        /// </summary>
        /// <param name="input">Instance of UnknownChallengeError to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UnknownChallengeError input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.error == input.error ||
                    (this.error != null &&
                    this.error.Equals(input.error))
                ) && 
                (
                    this.error_slug == input.error_slug ||
                    (this.error_slug != null &&
                    this.error_slug.Equals(input.error_slug))
                ) && 
                (
                    this.status_code == input.status_code ||
                    (this.status_code != null &&
                    this.status_code.Equals(input.status_code))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.error != null)
                    hashCode = hashCode * 59 + this.error.GetHashCode();
                if (this.error_slug != null)
                    hashCode = hashCode * 59 + this.error_slug.GetHashCode();
                if (this.status_code != null)
                    hashCode = hashCode * 59 + this.status_code.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
