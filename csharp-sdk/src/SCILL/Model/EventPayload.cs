/* 
 * SCILL API
 *
 * SCILL gives you the tools to activate, retain and grow your user base in your app or game by bringing you features well known in the gaming industry: Gamification. We take care of the services and technology involved so you can focus on your game and content.
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@scillgame.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = SCILL.Client.SwaggerDateConverter;

namespace SCILL.Model
{
    /// <summary>
    /// Events are the engine and driver for challenges, battle passes and leaderboards within the SCILL ecosystem. They are a simple, yet powerful data structure. The idea is, that you just send events for actions and things that happen in your game or application. SCILL leverages these info to update and progress challenges or to figure out the users score within a leaderboard. You don&#x27;t have to handle any state in your application or game, as everything is done by SCILL.
    /// </summary>
    [DataContract]
        public partial class EventPayload :  IEquatable<EventPayload>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EventPayload" /> class.
        /// </summary>
        /// <param name="userId">This is your user id. You can set this to whatever you like, either your real user id or an obfuscated user id. However you need to be consistent here. Events linked to this user id only track if challenges or battle passes are unlocked with the same user id..</param>
        /// <param name="sessionId">This is required if event_type is single and identifies a session. This can be anything used to group events together. For example this can be a level or a match id..</param>
        /// <param name="eventName">This is the event type as a string. These have predefined event names for many games and applications. It’s wise to use those as this allows us to analyse data and help you balancing your application or game..</param>
        /// <param name="eventType">This is either single or group. You can send multiple events in one request (group) or send events in sequence. Please note, that depending on your tier you might run into rate limits. (default to &quot;single&quot;).</param>
        /// <param name="metaData">metaData.</param>
        /// <param name="teamId">Provide an optional team id that will be used in leaderboards to group results of teams..</param>
        public EventPayload(string userId = default(string), string sessionId = default(string), string eventName = default(string), string eventType = "single", EventMetaData metaData = default(EventMetaData), string teamId = default(string))
        {
            this.user_id = userId;
            this.session_id = sessionId;
            this.event_name = eventName;
            // use default value if no "eventType" provided
            if (eventType == null)
            {
                this.event_type = "single";
            }
            else
            {
                this.event_type = eventType;
            }
            this.meta_data = metaData;
            this.team_id = teamId;
        }
        
        /// <summary>
        /// This is your user id. You can set this to whatever you like, either your real user id or an obfuscated user id. However you need to be consistent here. Events linked to this user id only track if challenges or battle passes are unlocked with the same user id.
        /// </summary>
        /// <value>This is your user id. You can set this to whatever you like, either your real user id or an obfuscated user id. However you need to be consistent here. Events linked to this user id only track if challenges or battle passes are unlocked with the same user id.</value>
        [DataMember(Name="user_id", EmitDefaultValue=false)]
        public string user_id { get; set; }

        /// <summary>
        /// This is required if event_type is single and identifies a session. This can be anything used to group events together. For example this can be a level or a match id.
        /// </summary>
        /// <value>This is required if event_type is single and identifies a session. This can be anything used to group events together. For example this can be a level or a match id.</value>
        [DataMember(Name="session_id", EmitDefaultValue=false)]
        public string session_id { get; set; }

        /// <summary>
        /// This is the event type as a string. These have predefined event names for many games and applications. It’s wise to use those as this allows us to analyse data and help you balancing your application or game.
        /// </summary>
        /// <value>This is the event type as a string. These have predefined event names for many games and applications. It’s wise to use those as this allows us to analyse data and help you balancing your application or game.</value>
        [DataMember(Name="event_name", EmitDefaultValue=false)]
        public string event_name { get; set; }

        /// <summary>
        /// This is either single or group. You can send multiple events in one request (group) or send events in sequence. Please note, that depending on your tier you might run into rate limits.
        /// </summary>
        /// <value>This is either single or group. You can send multiple events in one request (group) or send events in sequence. Please note, that depending on your tier you might run into rate limits.</value>
        [DataMember(Name="event_type", EmitDefaultValue=false)]
        public string event_type { get; set; }

        /// <summary>
        /// Gets or Sets meta_data
        /// </summary>
        [DataMember(Name="meta_data", EmitDefaultValue=false)]
        public EventMetaData meta_data { get; set; }

        /// <summary>
        /// Provide an optional team id that will be used in leaderboards to group results of teams.
        /// </summary>
        /// <value>Provide an optional team id that will be used in leaderboards to group results of teams.</value>
        [DataMember(Name="team_id", EmitDefaultValue=false)]
        public string team_id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EventPayload {\n");
            sb.Append("  user_id: ").Append(user_id).Append("\n");
            sb.Append("  session_id: ").Append(session_id).Append("\n");
            sb.Append("  event_name: ").Append(event_name).Append("\n");
            sb.Append("  event_type: ").Append(event_type).Append("\n");
            sb.Append("  meta_data: ").Append(meta_data).Append("\n");
            sb.Append("  team_id: ").Append(team_id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EventPayload);
        }

        /// <summary>
        /// Returns true if EventPayload instances are equal
        /// </summary>
        /// <param name="input">Instance of EventPayload to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EventPayload input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.user_id == input.user_id ||
                    (this.user_id != null &&
                    this.user_id.Equals(input.user_id))
                ) && 
                (
                    this.session_id == input.session_id ||
                    (this.session_id != null &&
                    this.session_id.Equals(input.session_id))
                ) && 
                (
                    this.event_name == input.event_name ||
                    (this.event_name != null &&
                    this.event_name.Equals(input.event_name))
                ) && 
                (
                    this.event_type == input.event_type ||
                    (this.event_type != null &&
                    this.event_type.Equals(input.event_type))
                ) && 
                (
                    this.meta_data == input.meta_data ||
                    (this.meta_data != null &&
                    this.meta_data.Equals(input.meta_data))
                ) && 
                (
                    this.team_id == input.team_id ||
                    (this.team_id != null &&
                    this.team_id.Equals(input.team_id))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.user_id != null)
                    hashCode = hashCode * 59 + this.user_id.GetHashCode();
                if (this.session_id != null)
                    hashCode = hashCode * 59 + this.session_id.GetHashCode();
                if (this.event_name != null)
                    hashCode = hashCode * 59 + this.event_name.GetHashCode();
                if (this.event_type != null)
                    hashCode = hashCode * 59 + this.event_type.GetHashCode();
                if (this.meta_data != null)
                    hashCode = hashCode * 59 + this.meta_data.GetHashCode();
                if (this.team_id != null)
                    hashCode = hashCode * 59 + this.team_id.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
