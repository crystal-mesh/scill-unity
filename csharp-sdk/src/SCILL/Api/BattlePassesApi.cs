/* 
 * SCILL API
 *
 * SCILL gives you the tools to activate, retain and grow your user base in your app or game by bringing you features well known in the gaming industry: Gamification. We take care of the services and technology involved so you can focus on your game and content.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@scillgame.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using RSG;
using SCILL.Client;
using SCILL.Model;

namespace SCILL.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial interface IBattlePassesApi : IApiAccessor
    {
        #region Asynchronous Operations

        /// <summary>
        /// Activate a given battle pass level by id
        /// </summary>
        /// <remarks>
        /// Activate a given battle pass level by id
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resolve">Called on valid API response.</param>
        /// <param name="reject">Called on error response.</param>
        /// <param name="appId">The app id</param>
        /// <param name="levelId">The id of the battle pass level.</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        void ActivateBattlePassLevelAsync(Action<ActionResponse> resolve, Action<Exception> reject, string appId,
            string levelId,
            string language = null);

        /// <summary>
        /// Activate a given battle pass level by id
        /// </summary>
        /// <remarks>
        /// Activate a given battle pass level by id
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="levelId">The id of the battle pass level.</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Promise of ActionResponse</returns>
        IPromise<ActionResponse> ActivateBattlePassLevelAsync(string appId, string levelId, string language = null);

        /// <summary>
        /// Activate a given battle pass level by id
        /// </summary>
        /// <remarks>
        /// Activate a given battle pass level by id
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="levelId">The id of the battle pass level.</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Promise of ApiResponse (ActionResponse)</returns>
        IPromise<ApiResponse<ActionResponse>> ActivateBattlePassLevelAsyncWithHttpInfo(string appId, string levelId,
            string language = null);

        /// <summary>
        /// Claim the battle pass level reward. This will trigger a Webhook that you can use to unlock the reward on server side. If you don&#x27;t have a server you can also unlock in the client application after receiving a positive response.
        /// </summary>
        /// <remarks>
        /// Claim the battle pass level id
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resolve">Called on valid API response.</param>
        /// <param name="reject">Called on error response.</param>
        /// <param name="appId">The app id</param>
        /// <param name="levelId">The id of the battle pass level.</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        void ClaimBattlePassLevelRewardAsync(Action<ActionResponse> resolve, Action<Exception> reject, string appId,
            string levelId,
            string language = null);

        /// <summary>
        /// Claim the battle pass level reward. This will trigger a Webhook that you can use to unlock the reward on server side. If you don&#x27;t have a server you can also unlock in the client application after receiving a positive response.
        /// </summary>
        /// <remarks>
        /// Claim the battle pass level id
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="levelId">The id of the battle pass level.</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Promise of ActionResponse</returns>
        IPromise<ActionResponse> ClaimBattlePassLevelRewardAsync(string appId, string levelId, string language = null);

        /// <summary>
        /// Claim the battle pass level reward. This will trigger a Webhook that you can use to unlock the reward on server side. If you don&#x27;t have a server you can also unlock in the client application after receiving a positive response.
        /// </summary>
        /// <remarks>
        /// Claim the battle pass level id
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="levelId">The id of the battle pass level.</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Promise of ApiResponse (ActionResponse)</returns>
        IPromise<ApiResponse<ActionResponse>> ClaimBattlePassLevelRewardAsyncWithHttpInfo(string appId, string levelId,
            string language = null);

        /// <summary>
        /// Get battle passes
        /// </summary>
        /// <remarks>
        /// Get active battle passes for the app
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resolve">Called on valid API response.</param>
        /// <param name="reject">Called on error response.</param>
        /// <param name="appId">The app id</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        void GetActiveBattlePassesAsync(Action<List<BattlePass>> resolve, Action<Exception> reject, string appId,
            string language = null);

        /// <summary>
        /// Get battle passes
        /// </summary>
        /// <remarks>
        /// Get active battle passes for the app
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Promise of List&lt;BattlePass&gt;</returns>
        IPromise<List<BattlePass>> GetActiveBattlePassesAsync(string appId, string language = null);

        /// <summary>
        /// Get battle passes
        /// </summary>
        /// <remarks>
        /// Get active battle passes for the app
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Promise of ApiResponse (List&lt;BattlePass&gt;)</returns>
        IPromise<ApiResponse<List<BattlePass>>> GetActiveBattlePassesAsyncWithHttpInfo(string appId,
            string language = null);


        /// <summary>
        /// Get battle pass levels for an app (from all battle passes)
        /// </summary>
        /// <remarks>
        /// Get all battle pass levels for an app
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resolve">Called on valid API response.</param>
        /// <param name="reject">Called on error response.</param>
        /// <param name="appId">The app id</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        void GetAllBattlePassLevelsAsync(Action<List<BattlePassLevel>> resolve, Action<Exception> reject, string appId,
            string language = null);


        /// <summary>
        /// Get battle pass levels for an app (from all battle passes)
        /// </summary>
        /// <remarks>
        /// Get all battle pass levels for an app
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Promise of List&lt;BattlePassLevel&gt;</returns>
        IPromise<List<BattlePassLevel>> GetAllBattlePassLevelsAsync(string appId, string language = null);

        /// <summary>
        /// Get battle pass levels for an app (from all battle passes)
        /// </summary>
        /// <remarks>
        /// Get all battle pass levels for an app
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Promise of ApiResponse (List&lt;BattlePassLevel&gt;)</returns>
        IPromise<ApiResponse<List<BattlePassLevel>>> GetAllBattlePassLevelsAsyncWithHttpInfo(string appId,
            string language = null);

        /// <summary>
        /// Get battle pass by id
        /// </summary>
        /// <remarks>
        /// Get battle pass for the product with id
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resolve">Called on valid API response.</param>
        /// <param name="reject">Called on error response.</param>
        /// <param name="appId">The app id</param>
        /// <param name="battlePassId">The id of the battle pass. It’s the same as in battle_pass_id you received in earlier requests (i.e. getting all active battle passes for a product).</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        void GetBattlePassAsync(Action<BattlePass> resolve, Action<Exception> reject, string appId, string battlePassId,
            string language = null);

        /// <summary>
        /// Get battle pass by id
        /// </summary>
        /// <remarks>
        /// Get battle pass for the product with id
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="battlePassId">The id of the battle pass. It’s the same as in battle_pass_id you received in earlier requests (i.e. getting all active battle passes for a product).</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Promise of BattlePass</returns>
        IPromise<BattlePass> GetBattlePassAsync(string appId, string battlePassId, string language = null);

        /// <summary>
        /// Get battle pass by id
        /// </summary>
        /// <remarks>
        /// Get battle pass for the product with id
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="battlePassId">The id of the battle pass. It’s the same as in battle_pass_id you received in earlier requests (i.e. getting all active battle passes for a product).</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Promise of ApiResponse (BattlePass)</returns>
        IPromise<ApiResponse<BattlePass>> GetBattlePassAsyncWithHttpInfo(string appId, string battlePassId,
            string language = null);

        /// <summary>
        /// Get battle pass levels for a battle pass
        /// </summary>
        /// <remarks>
        /// Get battle pass levels for a battle pass
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resolve">Called on valid API response.</param>
        /// <param name="reject">Called on error response.</param>
        /// <param name="appId">The app id</param>
        /// <param name="battlePassId">The id of the battle pass. It’s the same as in battle_pass_id you received in earlier requests (i.e. getting all active battle passes for a product).</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        void GetBattlePassLevelsAsync(Action<List<BattlePassLevel>> resolve, Action<Exception> reject, string appId,
            string battlePassId,
            string language = null);

        /// <summary>
        /// Get battle pass levels for a battle pass
        /// </summary>
        /// <remarks>
        /// Get battle pass levels for a battle pass
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="battlePassId">The id of the battle pass. It’s the same as in battle_pass_id you received in earlier requests (i.e. getting all active battle passes for a product).</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Promise of List&lt;BattlePassLevel&gt;</returns>
        IPromise<List<BattlePassLevel>> GetBattlePassLevelsAsync(string appId, string battlePassId,
            string language = null);

        /// <summary>
        /// Get battle pass levels for a battle pass
        /// </summary>
        /// <remarks>
        /// Get battle pass levels for a battle pass
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="battlePassId">The id of the battle pass. It’s the same as in battle_pass_id you received in earlier requests (i.e. getting all active battle passes for a product).</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Promise of ApiResponse (List&lt;BattlePassLevel&gt;)</returns>
        IPromise<ApiResponse<List<BattlePassLevel>>> GetBattlePassLevelsAsyncWithHttpInfo(string appId,
            string battlePassId, string language = null);

        /// <summary>
        /// Get battle passes
        /// </summary>
        /// <remarks>
        /// Get battle passes for the product
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resolve">Called on valid API response.</param>
        /// <param name="reject">Called on error response.</param>
        /// <param name="appId">The app id</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        void GetBattlePassesAsync(Action<List<BattlePass>> resolve, Action<Exception> reject, string appId,
            string language = null);

        /// <summary>
        /// Get battle passes
        /// </summary>
        /// <remarks>
        /// Get battle passes for the product
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Promise of List&lt;BattlePass&gt;</returns>
        IPromise<List<BattlePass>> GetBattlePassesAsync(string appId, string language = null);

        /// <summary>
        /// Get battle passes
        /// </summary>
        /// <remarks>
        /// Get battle passes for the product
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Promise of ApiResponse (List&lt;BattlePass&gt;)</returns>
        IPromise<ApiResponse<List<BattlePass>>> GetBattlePassesAsyncWithHttpInfo(string appId, string language = null);

        /// <summary>
        /// Get battle passes unlocked by the user
        /// </summary>
        /// <remarks>
        /// Get unlocked battle passes for the user encoded in the access token
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resolve">Called on valid API response.</param>
        /// <param name="reject">Called on error response.</param>
        /// <param name="appId">The app id</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        void GetUnlockedBattlePassesAsync(Action<List<BattlePass>> resolve, Action<Exception> reject, string appId,
            string language = null);


        /// <summary>
        /// Get battle passes unlocked by the user
        /// </summary>
        /// <remarks>
        /// Get unlocked battle passes for the user encoded in the access token
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Promise of List&lt;BattlePass&gt;</returns>
        IPromise<List<BattlePass>> GetUnlockedBattlePassesAsync(string appId, string language = null);

        /// <summary>
        /// Get battle passes unlocked by the user
        /// </summary>
        /// <remarks>
        /// Get unlocked battle passes for the user encoded in the access token
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Promise of ApiResponse (List&lt;BattlePass&gt;)</returns>
        IPromise<ApiResponse<List<BattlePass>>> GetUnlockedBattlePassesAsyncWithHttpInfo(string appId,
            string language = null);

        /// <summary>
        /// Unlock the battle pass for the user specified in the access token
        /// </summary>
        /// <remarks>
        /// Unlock the battle pass for a user
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resolve">Called on valid API response.</param>
        /// <param name="reject">Called on error response.</param>
        /// <param name="appId">The app id</param>
        /// <param name="battlePassId">The id of the battle pass. It’s the same as in battle_pass_id you received in earlier requests (i.e. getting all active battle passes for a product).</param>
        /// <param name="body">Provide purchase info for the battle pass (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        void UnlockBattlePassAsync(Action<BattlePassUnlockInfo> resolve, Action<Exception> reject, string appId,
            string battlePassId,
            BattlePassUnlockPayload body = null, string language = null);

        /// <summary>
        /// Unlock the battle pass for the user specified in the access token
        /// </summary>
        /// <remarks>
        /// Unlock the battle pass for a user
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="battlePassId">The id of the battle pass. It’s the same as in battle_pass_id you received in earlier requests (i.e. getting all active battle passes for a product).</param>
        /// <param name="body">Provide purchase info for the battle pass (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Promise of BattlePassUnlockInfo</returns>
        IPromise<BattlePassUnlockInfo> UnlockBattlePassAsync(string appId, string battlePassId,
            BattlePassUnlockPayload body = null, string language = null);

        /// <summary>
        /// Unlock the battle pass for the user specified in the access token
        /// </summary>
        /// <remarks>
        /// Unlock the battle pass for a user
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="battlePassId">The id of the battle pass. It’s the same as in battle_pass_id you received in earlier requests (i.e. getting all active battle passes for a product).</param>
        /// <param name="body">Provide purchase info for the battle pass (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Promise of ApiResponse (BattlePassUnlockInfo)</returns>
        IPromise<ApiResponse<BattlePassUnlockInfo>> UnlockBattlePassAsyncWithHttpInfo(string appId, string battlePassId,
            BattlePassUnlockPayload body = null, string language = null);

        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    /// <inheritdoc/>
    public partial class BattlePassesApi : IBattlePassesApi
    {
        private SCILL.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BattlePassesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BattlePassesApi(String basePath)
        {
            this.Configuration = new SCILL.Client.Configuration {BasePath = basePath};

            ExceptionFactory = SCILL.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BattlePassesApi"/> class
        /// </summary>
        /// <returns></returns>
        public BattlePassesApi()
        {
            this.Configuration = SCILL.Client.Configuration.Default;

            ExceptionFactory = SCILL.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BattlePassesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BattlePassesApi(SCILL.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = SCILL.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = SCILL.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete(
            "SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public SCILL.Client.Configuration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public SCILL.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }

                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        public void ActivateBattlePassLevelAsync(Action<ActionResponse> resolve, Action<Exception> reject, string appId,
            string levelId,
            string language = null)
        {
            ActivateBattlePassLevelAsync(appId, levelId, language).Then(resolve).Catch(reject);
        }

        public IPromise<ActionResponse> ActivateBattlePassLevelAsync(string appId, string levelId,
            string language = null)
        {
            return ActivateBattlePassLevelAsyncWithHttpInfo(appId, levelId, language).ExtractResponseData();
        }

        public IPromise<ApiResponse<ActionResponse>> ActivateBattlePassLevelAsyncWithHttpInfo(string appId,
            string levelId, string language = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400,
                    "Missing required parameter 'appId' when calling BattlePassesApi->ActivateBattlePassLevel");
            // verify the required parameter 'levelId' is set
            if (levelId == null)
                throw new ApiException(400,
                    "Missing required parameter 'levelId' when calling BattlePassesApi->ActivateBattlePassLevel");

            var localVarPath = $"/api/v1/battle-pass-levels/{appId}/activate/{levelId}";


            HttpMethod method = HttpMethod.Post;
            object body = null;

            ApiRequest request =
                Configuration.ApiClient.CreateBaseApiRequest(body, localVarPath, method, language);

            var responsePromise =
                Configuration.ApiClient.CallApi<ActionResponse>(request, ExceptionFactory, "ActivateBattlePassLevel");
            return responsePromise;
        }

        public void ClaimBattlePassLevelRewardAsync(Action<ActionResponse> resolve, Action<Exception> reject,
            string appId, string levelId,
            string language = null)
        {
            ClaimBattlePassLevelRewardAsync(appId, levelId,
                language).Then(resolve).Catch(reject);
        }

        public IPromise<ActionResponse> ClaimBattlePassLevelRewardAsync(string appId, string levelId,
            string language = null)
        {
            return ClaimBattlePassLevelRewardAsyncWithHttpInfo(appId, levelId, language).ExtractResponseData();
        }

        public IPromise<ApiResponse<ActionResponse>> ClaimBattlePassLevelRewardAsyncWithHttpInfo(string appId,
            string levelId, string language = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400,
                    "Missing required parameter 'appId' when calling BattlePassesApi->ClaimBattlePassLevelReward");
            // verify the required parameter 'levelId' is set
            if (levelId == null)
                throw new ApiException(400,
                    "Missing required parameter 'levelId' when calling BattlePassesApi->ClaimBattlePassLevelReward");

            var localVarPath = $"/api/v1/battle-pass-levels/{appId}/claim/{levelId}";

            HttpMethod method = HttpMethod.Post;
            object body = null;

            ApiRequest request =
                Configuration.ApiClient.CreateBaseApiRequest(body, localVarPath, method, language);

            var responsePromise =
                Configuration.ApiClient.CallApi<ActionResponse>(request, ExceptionFactory,
                    "ClaimBattlePassLevelReward");
            return responsePromise;
        }

        public void GetActiveBattlePassesAsync(Action<List<BattlePass>> resolve, Action<Exception> reject, string appId,
            string language = null)
        {
            GetActiveBattlePassesAsync(appId, language).Then(resolve).Catch(reject);
        }

        public IPromise<List<BattlePass>> GetActiveBattlePassesAsync(string appId, string language = null)
        {
            return GetActiveBattlePassesAsyncWithHttpInfo(appId, language).ExtractResponseData();
        }

        public IPromise<ApiResponse<List<BattlePass>>> GetActiveBattlePassesAsyncWithHttpInfo(string appId,
            string language = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400,
                    "Missing required parameter 'appId' when calling BattlePassesApi->GetActiveBattlePasses");

            var localVarPath = $"/api/v1/battle-passes/{appId}/active";

            HttpMethod method = HttpMethod.Get;
            object body = null;

            ApiRequest request =
                Configuration.ApiClient.CreateBaseApiRequest(body, localVarPath, method, language);

            var responsePromise =
                Configuration.ApiClient.CallApi<List<BattlePass>>(request, ExceptionFactory, "GetActiveBattlePasses");
            return responsePromise;
        }

        public void GetAllBattlePassLevelsAsync(Action<List<BattlePassLevel>> resolve, Action<Exception> reject,
            string appId,
            string language = null)
        {
            GetAllBattlePassLevelsAsync(appId, language).Then(resolve).Catch(reject);
        }

        public IPromise<List<BattlePassLevel>> GetAllBattlePassLevelsAsync(string appId, string language = null)
        {
            return GetAllBattlePassLevelsAsyncWithHttpInfo(appId, language).ExtractResponseData();
        }

        public IPromise<ApiResponse<List<BattlePassLevel>>> GetAllBattlePassLevelsAsyncWithHttpInfo(string appId,
            string language = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400,
                    "Missing required parameter 'appId' when calling BattlePassesApi->GetAllBattlePassLevels");

            var localVarPath = $"/api/v1/battle-pass-levels/{appId}";

            HttpMethod method = HttpMethod.Get;
            object body = null;

            ApiRequest request =
                Configuration.ApiClient.CreateBaseApiRequest(body, localVarPath, method, language);

            var responsePromise =
                Configuration.ApiClient.CallApi<List<BattlePassLevel>>(request, ExceptionFactory,
                    "GetAllBattlePassLevels");
            return responsePromise;
        }

        public void GetBattlePassAsync(Action<BattlePass> resolve, Action<Exception> reject, string appId,
            string battlePassId,
            string language = null)
        {
            GetBattlePassAsync(appId, battlePassId, language).Then(resolve).Catch(reject);
        }

        public IPromise<BattlePass> GetBattlePassAsync(string appId, string battlePassId, string language = null)
        {
            return GetBattlePassAsyncWithHttpInfo(appId, battlePassId, language).ExtractResponseData();
        }

        public IPromise<ApiResponse<BattlePass>> GetBattlePassAsyncWithHttpInfo(string appId, string battlePassId,
            string language = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400,
                    "Missing required parameter 'appId' when calling BattlePassesApi->GetBattlePass");
            // verify the required parameter 'battlePassId' is set
            if (battlePassId == null)
                throw new ApiException(400,
                    "Missing required parameter 'battlePassId' when calling BattlePassesApi->GetBattlePass");

            var localVarPath = $"/api/v1/battle-passes/{appId}/single/{battlePassId}";
            HttpMethod method = HttpMethod.Get;
            object body = null;

            ApiRequest request =
                Configuration.ApiClient.CreateBaseApiRequest(body, localVarPath, method, language);

            var responsePromise =
                Configuration.ApiClient.CallApi<BattlePass>(request, ExceptionFactory, "GetBattlePass");
            return responsePromise;
        }

        public void GetBattlePassLevelsAsync(Action<List<BattlePassLevel>> resolve, Action<Exception> reject,
            string appId, string battlePassId,
            string language = null)
        {
            GetBattlePassLevelsAsync(appId, battlePassId, language).Then(resolve).Catch(reject);
        }

        public IPromise<List<BattlePassLevel>> GetBattlePassLevelsAsync(string appId, string battlePassId,
            string language = null)
        {
            return GetBattlePassLevelsAsyncWithHttpInfo(appId, battlePassId, language).ExtractResponseData();
        }

        public IPromise<ApiResponse<List<BattlePassLevel>>> GetBattlePassLevelsAsyncWithHttpInfo(string appId,
            string battlePassId, string language = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400,
                    "Missing required parameter 'appId' when calling BattlePassesApi->GetBattlePassLevels");
            // verify the required parameter 'battlePassId' is set
            if (battlePassId == null)
                throw new ApiException(400,
                    "Missing required parameter 'battlePassId' when calling BattlePassesApi->GetBattlePassLevels");

            var localVarPath = $"/api/v1/battle-pass-levels/{appId}/{battlePassId}";


            HttpMethod method = HttpMethod.Get;
            object body = null;

            ApiRequest request =
                Configuration.ApiClient.CreateBaseApiRequest(body, localVarPath, method, language);

            var responsePromise =
                Configuration.ApiClient.CallApi<List<BattlePassLevel>>(request, ExceptionFactory,
                    "GetBattlePassLevels");
            return responsePromise;
        }

        public void GetBattlePassesAsync(Action<List<BattlePass>> resolve, Action<Exception> reject, string appId,
            string language = null)
        {
            GetBattlePassesAsync(appId, language).Then(resolve).Catch(reject);
        }

        public IPromise<List<BattlePass>> GetBattlePassesAsync(string appId, string language = null)
        {
            return GetBattlePassesAsyncWithHttpInfo(appId, language).ExtractResponseData();
        }

        public IPromise<ApiResponse<List<BattlePass>>> GetBattlePassesAsyncWithHttpInfo(string appId,
            string language = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400,
                    "Missing required parameter 'appId' when calling BattlePassesApi->GetBattlePasses");

            var localVarPath = $"/api/v1/battle-passes/{appId}";
            ApiRequest request =
                Configuration.ApiClient.CreateBaseApiRequest(null, localVarPath, HttpMethod.Get);

            if (language != null)
                request.QueryParams.AddRange(
                    this.Configuration.ApiClient.ParameterToKeyValuePairs("", "language", language)); // query parameter

            var responsePromise =
                Configuration.ApiClient.CallApi<List<BattlePass>>(request, ExceptionFactory, "GetBattlePassesAsync");
            return responsePromise;
        }

        public void GetUnlockedBattlePassesAsync(Action<List<BattlePass>> resolve, Action<Exception> reject,
            string appId,
            string language = null)
        {
            GetUnlockedBattlePassesAsync(appId, language).Then(resolve).Catch(reject);
        }

        public IPromise<List<BattlePass>> GetUnlockedBattlePassesAsync(string appId, string language = null)
        {
            return GetUnlockedBattlePassesAsyncWithHttpInfo(appId, language).ExtractResponseData();
        }

        public IPromise<ApiResponse<List<BattlePass>>> GetUnlockedBattlePassesAsyncWithHttpInfo(string appId,
            string language = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400,
                    "Missing required parameter 'appId' when calling BattlePassesApi->GetUnlockedBattlePasses");

            var localVarPath = $"/api/v1/battle-passes/{appId}/unlocked";
            HttpMethod method = HttpMethod.Get;
            object body = null;

            ApiRequest request =
                Configuration.ApiClient.CreateBaseApiRequest(body, localVarPath, method, language);

            var responsePromise =
                Configuration.ApiClient.CallApi<List<BattlePass>>(request, ExceptionFactory, "GetUnlockedBattlePasses");
            return responsePromise;
        }

        public void UnlockBattlePassAsync(Action<BattlePassUnlockInfo> resolve, Action<Exception> reject, string appId,
            string battlePassId,
            BattlePassUnlockPayload body = null,
            string language = null)
        {
            UnlockBattlePassAsync(appId, battlePassId, body, language).Then(resolve).Catch(reject);
        }

        public IPromise<BattlePassUnlockInfo> UnlockBattlePassAsync(string appId, string battlePassId,
            BattlePassUnlockPayload body = null, string language = null)
        {
            return UnlockBattlePassAsyncWithHttpInfo(appId, battlePassId, body, language).ExtractResponseData();
        }

        public IPromise<ApiResponse<BattlePassUnlockInfo>> UnlockBattlePassAsyncWithHttpInfo(string appId,
            string battlePassId, BattlePassUnlockPayload body = null, string language = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400,
                    "Missing required parameter 'appId' when calling BattlePassesApi->UnlockBattlePass");
            // verify the required parameter 'battlePassId' is set
            if (battlePassId == null)
                throw new ApiException(400,
                    "Missing required parameter 'battlePassId' when calling BattlePassesApi->UnlockBattlePass");

            var localVarPath = $"/api/v1/battle-passes/{appId}/unlock/{battlePassId}";
            HttpMethod method = HttpMethod.Post;

            ApiRequest request =
                Configuration.ApiClient.CreateBaseApiRequest(body, localVarPath, method, language);

            var responsePromise =
                Configuration.ApiClient.CallApi<BattlePassUnlockInfo>(request, ExceptionFactory, "UnlockBattlePass");
            return responsePromise;
        }
    }
}