/* 
 * SCILL API
 *
 * SCILL gives you the tools to activate, retain and grow your user base in your app or game by bringing you features well known in the gaming industry: Gamification. We take care of the services and technology involved so you can focus on your game and content.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@scillgame.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using RSG;
using SCILL.Client;
using SCILL.Model;

namespace SCILL.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial interface IChallengesApi : IApiAccessor
    {
        #region Asynchronous Operations

        /// <summary>
        /// Activate a personal challenge.
        /// </summary>
        /// <remarks>
        /// Activate a personal challenge by product id and user challenge id.
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resolve">Called on valid API response.</param>
        /// <param name="reject">Called on error response.</param>
        /// <param name="appId">The app id</param>
        /// <param name="challengeId">The challenge id (see challenge_id of Challenge object)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        void ActivatePersonalChallengeAsync(Action<ActionResponse> resolve, Action<Exception> reject, string appId,
            string challengeId,
            string language = null);

        /// <summary>
        /// Activate a personal challenge.
        /// </summary>
        /// <remarks>
        /// Activate a personal challenge by product id and user challenge id.
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="challengeId">The challenge id (see challenge_id of Challenge object)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Promise of ActionResponse</returns>
        IPromise<ActionResponse> ActivatePersonalChallengeAsync(string appId, string challengeId,
            string language = null);

        /// <summary>
        /// Activate a personal challenge.
        /// </summary>
        /// <remarks>
        /// Activate a personal challenge by product id and user challenge id.
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="challengeId">The challenge id (see challenge_id of Challenge object)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Promise of ApiResponse (ActionResponse)</returns>
        IPromise<ApiResponse<ActionResponse>> ActivatePersonalChallengeAsyncWithHttpInfo(string appId,
            string challengeId, string language = null);

        /// <summary>
        /// Cancel an active personal challenge.
        /// </summary>
        /// <remarks>
        /// Cancel an active personal challenge by product id and user challenge id
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resolve">Called on valid API response.</param>
        /// <param name="reject">Called on error response.</param>
        /// <param name="appId">The app id</param>
        /// <param name="challengeId">The challenge id (see challenge_id of Challenge object)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        void CancelPersonalChallengeAsync(Action<ActionResponse> resolve, Action<Exception> reject, string appId,
            string challengeId,
            string language = null);

        /// <summary>
        /// Cancel an active personal challenge.
        /// </summary>
        /// <remarks>
        /// Cancel an active personal challenge by product id and user challenge id
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="challengeId">The challenge id (see challenge_id of Challenge object)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Promise of ActionResponse</returns>
        IPromise<ActionResponse> CancelPersonalChallengeAsync(string appId, string challengeId, string language = null);

        /// <summary>
        /// Cancel an active personal challenge.
        /// </summary>
        /// <remarks>
        /// Cancel an active personal challenge by product id and user challenge id
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="challengeId">The challenge id (see challenge_id of Challenge object)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Promise of ApiResponse (ActionResponse)</returns>
        IPromise<ApiResponse<ActionResponse>> CancelPersonalChallengeAsyncWithHttpInfo(string appId, string challengeId,
            string language = null);

        /// <summary>
        /// Claim the reward of a finished personal challenge.
        /// </summary>
        /// <remarks>
        /// Claim the reward of a finished personal challenge by product id and user challenge id
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resolve">Called on valid API response.</param>
        /// <param name="reject">Called on error response.</param>
        /// <param name="appId">The app id</param>
        /// <param name="challengeId">The challenge id (see challenge_id of Challenge object)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        void ClaimPersonalChallengeRewardAsync(Action<ActionResponse> resolve, Action<Exception> reject, string appId,
            string challengeId,
            string language = null);

        /// <summary>
        /// Claim the reward of a finished personal challenge.
        /// </summary>
        /// <remarks>
        /// Claim the reward of a finished personal challenge by product id and user challenge id
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="challengeId">The challenge id (see challenge_id of Challenge object)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Promise of ActionResponse</returns>
        IPromise<ActionResponse> ClaimPersonalChallengeRewardAsync(string appId, string challengeId,
            string language = null);

        /// <summary>
        /// Claim the reward of a finished personal challenge.
        /// </summary>
        /// <remarks>
        /// Claim the reward of a finished personal challenge by product id and user challenge id
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="challengeId">The challenge id (see challenge_id of Challenge object)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Promise of ApiResponse (ActionResponse)</returns>
        IPromise<ApiResponse<ActionResponse>> ClaimPersonalChallengeRewardAsyncWithHttpInfo(string appId,
            string challengeId, string language = null);

        /// <summary>
        /// Get an access token for the Websockets server notifying of updates in real time
        /// </summary>
        /// <remarks>
        /// Get an access token for the Websockets server notifying of updates in real time
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resolve">Called on valid API response.</param>
        /// <param name="reject">Called on error response.</param>
        void GenerateWebsocketAccessTokenAsync(Action<SocketToken> resolve, Action<Exception> reject);

        /// <summary>
        /// Get an access token for the Websockets server notifying of updates in real time
        /// </summary>
        /// <remarks>
        /// Get an access token for the Websockets server notifying of updates in real time
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Promise of SocketToken</returns>
        IPromise<SocketToken> GenerateWebsocketAccessTokenAsync();

        /// <summary>
        /// Get an access token for the Websockets server notifying of updates in real time
        /// </summary>
        /// <remarks>
        /// Get an access token for the Websockets server notifying of updates in real time
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Promise of ApiResponse (SocketToken)</returns>
        IPromise<ApiResponse<SocketToken>> GenerateWebsocketAccessTokenAsyncWithHttpInfo();

        /// <summary>
        /// Get active personal challenges
        /// </summary>
        /// <remarks>
        /// Get active personal challenges organized in categories
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resolve">Called on valid API response.</param>
        /// <param name="reject">Called on error response.</param>
        /// <param name="appId">The app id</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        void GetActivePersonalChallengesAsync(Action<List<ChallengeCategory>> resolve, Action<Exception> reject,
            string appId,
            string language = null);

        /// <summary>
        /// Get active personal challenges
        /// </summary>
        /// <remarks>
        /// Get active personal challenges organized in categories
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Promise of List&lt;ChallengeCategory&gt;</returns>
        IPromise<List<ChallengeCategory>> GetActivePersonalChallengesAsync(string appId, string language = null);

        /// <summary>
        /// Get active personal challenges
        /// </summary>
        /// <remarks>
        /// Get active personal challenges organized in categories
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Promise of ApiResponse (List&lt;ChallengeCategory&gt;)</returns>
        IPromise<ApiResponse<List<ChallengeCategory>>> GetActivePersonalChallengesAsyncWithHttpInfo(string appId,
            string language = null);

        /// <summary>
        /// Get all personal challenges available for your app. Also includes completed challenges.
        /// </summary>
        /// <remarks>
        /// Get personal challenges organized in categories that are not yet finished
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resolve">Called on valid API response.</param>
        /// <param name="reject">Called on error response.</param>
        /// <param name="appId">The app id</param>
        /// <param name="includeCategories">A list of categories that should be included in the response. Only the categories provided will be returned (optional)</param>
        /// <param name="excludeCategories">A list of categories that should be excluded from the response. All  categories except those listed here will be returned (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        void GetAllPersonalChallengesAsync(Action<List<ChallengeCategory>> resolve, Action<Exception> reject,
            string appId,
            List<string> includeCategories = null, List<string> excludeCategories = null, string language = null);

        /// <summary>
        /// Get all personal challenges available for your app. Also includes completed challenges.
        /// </summary>
        /// <remarks>
        /// Get personal challenges organized in categories that are not yet finished
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="includeCategories">A list of categories that should be included in the response. Only the categories provided will be returned (optional)</param>
        /// <param name="excludeCategories">A list of categories that should be excluded from the response. All  categories except those listed here will be returned (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Promise of List&lt;ChallengeCategory&gt;</returns>
        IPromise<List<ChallengeCategory>> GetAllPersonalChallengesAsync(string appId,
            List<string> includeCategories = null, List<string> excludeCategories = null, string language = null);

        /// <summary>
        /// Get all personal challenges available for your app. Also includes completed challenges.
        /// </summary>
        /// <remarks>
        /// Get personal challenges organized in categories that are not yet finished
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="includeCategories">A list of categories that should be included in the response. Only the categories provided will be returned (optional)</param>
        /// <param name="excludeCategories">A list of categories that should be excluded from the response. All  categories except those listed here will be returned (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Promise of ApiResponse (List&lt;ChallengeCategory&gt;)</returns>
        IPromise<ApiResponse<List<ChallengeCategory>>> GetAllPersonalChallengesAsyncWithHttpInfo(string appId,
            List<string> includeCategories = null, List<string> excludeCategories = null, string language = null);

        /// <summary>
        /// Get personal challenge by id
        /// </summary>
        /// <remarks>
        /// Get personal challenges organized in categories
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resolve">Called on valid API response.</param>
        /// <param name="reject">Called on error response.</param>
        /// <param name="appId">The app id</param>
        /// <param name="challengeId">The challenge id (see challenge_id of Challenge object)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        void GetPersonalChallengeByIdAsync(Action<Challenge> resolve, Action<Exception> reject, string appId,
            string challengeId,
            string language = null);

        /// <summary>
        /// Get personal challenge by id
        /// </summary>
        /// <remarks>
        /// Get personal challenges organized in categories
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="challengeId">The challenge id (see challenge_id of Challenge object)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Promise of Challenge</returns>
        IPromise<Challenge> GetPersonalChallengeByIdAsync(string appId, string challengeId, string language = null);

        /// <summary>
        /// Get personal challenge by id
        /// </summary>
        /// <remarks>
        /// Get personal challenges organized in categories
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="challengeId">The challenge id (see challenge_id of Challenge object)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Promise of ApiResponse (Challenge)</returns>
        IPromise<ApiResponse<Challenge>> GetPersonalChallengeByIdAsyncWithHttpInfo(string appId, string challengeId,
            string language = null);

        /// <summary>
        /// Get personal challenges that are not yet completed.
        /// </summary>
        /// <remarks>
        /// Get personal challenges organized in categories
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resolve">Called on valid API response.</param>
        /// <param name="reject">Called on error response.</param>
        /// <param name="appId">The app id</param>
        /// <param name="includeCategories">A list of categories that should be included in the response. Only the categories provided will be returned (optional)</param>
        /// <param name="excludeCategories">A list of categories that should be excluded from the response. All  categories except those listed here will be returned (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        void GetPersonalChallengesAsync(Action<List<ChallengeCategory>> resolve, Action<Exception> reject,
            string appId,
            List<string> includeCategories = null, List<string> excludeCategories = null, string language = null);

        /// <summary>
        /// Get personal challenges that are not yet completed.
        /// </summary>
        /// <remarks>
        /// Get personal challenges organized in categories
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="includeCategories">A list of categories that should be included in the response. Only the categories provided will be returned (optional)</param>
        /// <param name="excludeCategories">A list of categories that should be excluded from the response. All  categories except those listed here will be returned (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Promise of List&lt;ChallengeCategory&gt;</returns>
        IPromise<List<ChallengeCategory>> GetPersonalChallengesAsync(string appId,
            List<string> includeCategories = null, List<string> excludeCategories = null, string language = null);

        /// <summary>
        /// Get personal challenges that are not yet completed.
        /// </summary>
        /// <remarks>
        /// Get personal challenges organized in categories
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="includeCategories">A list of categories that should be included in the response. Only the categories provided will be returned (optional)</param>
        /// <param name="excludeCategories">A list of categories that should be excluded from the response. All  categories except those listed here will be returned (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Promise of ApiResponse (List&lt;ChallengeCategory&gt;)</returns>
        IPromise<ApiResponse<List<ChallengeCategory>>> GetPersonalChallengesAsyncWithHttpInfo(string appId,
            List<string> includeCategories = null, List<string> excludeCategories = null, string language = null);

        /// <summary>
        /// Get personal challenges that are not yet completed.
        /// </summary>
        /// <remarks>
        /// Get personal challenges organized in categories that are not yet finished
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resolve">Called on valid API response.</param>
        /// <param name="reject">Called on error response.</param>
        /// <param name="appId">The app id</param>
        /// <param name="includeCategories">A list of categories that should be included in the response. Only the categories provided will be returned (optional)</param>
        /// <param name="excludeCategories">A list of categories that should be excluded from the response. All  categories except those listed here will be returned (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        void GetUnresolvedPersonalChallengesAsync(Action<List<ChallengeCategory>> resolve, Action<Exception> reject,
            string appId,
            List<string> includeCategories = null, List<string> excludeCategories = null, string language = null);

        /// <summary>
        /// Get personal challenges that are not yet completed.
        /// </summary>
        /// <remarks>
        /// Get personal challenges organized in categories that are not yet finished
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="includeCategories">A list of categories that should be included in the response. Only the categories provided will be returned (optional)</param>
        /// <param name="excludeCategories">A list of categories that should be excluded from the response. All  categories except those listed here will be returned (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Promise of List&lt;ChallengeCategory&gt;</returns>
        IPromise<List<ChallengeCategory>> GetUnresolvedPersonalChallengesAsync(string appId,
            List<string> includeCategories = null, List<string> excludeCategories = null, string language = null);

        /// <summary>
        /// Get personal challenges that are not yet completed.
        /// </summary>
        /// <remarks>
        /// Get personal challenges organized in categories that are not yet finished
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="includeCategories">A list of categories that should be included in the response. Only the categories provided will be returned (optional)</param>
        /// <param name="excludeCategories">A list of categories that should be excluded from the response. All  categories except those listed here will be returned (optional)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Promise of ApiResponse (List&lt;ChallengeCategory&gt;)</returns>
        IPromise<ApiResponse<List<ChallengeCategory>>> GetUnresolvedPersonalChallengesAsyncWithHttpInfo(string appId,
            List<string> includeCategories = null, List<string> excludeCategories = null, string language = null);

        /// <summary>
        /// Unlock a personal challenges
        /// </summary>
        /// <remarks>
        /// Unlock a personal challenge by product id and challenge id
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resolve">Called on valid API response.</param>
        /// <param name="reject">Called on error response.</param>
        /// <param name="appId">The app id</param>
        /// <param name="challengeId">The challenge id (see challenge_id of Challenge object)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        void UnlockPersonalChallengeAsync(Action<ActionResponse> resolve, Action<Exception> reject, string appId,
            string challengeId,
            string language = null);

        /// <summary>
        /// Unlock a personal challenges
        /// </summary>
        /// <remarks>
        /// Unlock a personal challenge by product id and challenge id
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="challengeId">The challenge id (see challenge_id of Challenge object)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Promise of ActionResponse</returns>
        IPromise<ActionResponse> UnlockPersonalChallengeAsync(string appId, string challengeId, string language = null);

        /// <summary>
        /// Unlock a personal challenges
        /// </summary>
        /// <remarks>
        /// Unlock a personal challenge by product id and challenge id
        /// </remarks>
        /// <exception cref="SCILL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app id</param>
        /// <param name="challengeId">The challenge id (see challenge_id of Challenge object)</param>
        /// <param name="language">Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... (optional)</param>
        /// <returns>Promise of ApiResponse (ActionResponse)</returns>
        IPromise<ApiResponse<ActionResponse>> UnlockPersonalChallengeAsyncWithHttpInfo(string appId, string challengeId,
            string language = null);

        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    /// <inheritdoc/>
    public partial class ChallengesApi : IChallengesApi
    {
        private SCILL.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ChallengesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ChallengesApi(String basePath)
        {
            this.Configuration = new SCILL.Client.Configuration {BasePath = basePath};

            ExceptionFactory = SCILL.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChallengesApi"/> class
        /// </summary>
        /// <returns></returns>
        public ChallengesApi()
        {
            this.Configuration = SCILL.Client.Configuration.Default;

            ExceptionFactory = SCILL.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChallengesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ChallengesApi(SCILL.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = SCILL.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = SCILL.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete(
            "SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public SCILL.Client.Configuration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public SCILL.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }

                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        public void ActivatePersonalChallengeAsync(Action<ActionResponse> resolve, Action<Exception> reject,
            string appId, string challengeId,
            string language = null)
        {
            ActivatePersonalChallengeAsync(appId, challengeId,
                language).Then(resolve).Catch(reject);
        }

        public IPromise<ActionResponse> ActivatePersonalChallengeAsync(string appId, string challengeId,
            string language = null)
        {
            return ActivatePersonalChallengeAsyncWithHttpInfo(appId, challengeId, language).ExtractResponseData();
        }

        public IPromise<ApiResponse<ActionResponse>> ActivatePersonalChallengeAsyncWithHttpInfo(string appId,
            string challengeId, string language = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400,
                    "Missing required parameter 'appId' when calling ChallengesApi->ActivatePersonalChallenge");
            // verify the required parameter 'challengeId' is set
            if (challengeId == null)
                throw new ApiException(400,
                    "Missing required parameter 'challengeId' when calling ChallengesApi->ActivatePersonalChallenge");

            var localVarPath = $"/api/v1/challenges/personal/activate/{appId}/{challengeId}";

            HttpMethod method = HttpMethod.Put;
            object body = null;

            ApiRequest request =
                Configuration.ApiClient.CreateBaseApiRequest(body, localVarPath, method, language);

            var responsePromise =
                Configuration.ApiClient.CallApi<ActionResponse>(request, ExceptionFactory, "ActivatePersonalChallenge");
            return responsePromise;
        }

        public void CancelPersonalChallengeAsync(Action<ActionResponse> resolve, Action<Exception> reject,
            string appId, string challengeId,
            string language = null)
        {
            CancelPersonalChallengeAsync(appId, challengeId,
                language).Then(resolve).Catch(reject);
        }

        public IPromise<ActionResponse> CancelPersonalChallengeAsync(string appId, string challengeId,
            string language = null)
        {
            return CancelPersonalChallengeAsyncWithHttpInfo(appId, challengeId, language).ExtractResponseData();
        }

        public IPromise<ApiResponse<ActionResponse>> CancelPersonalChallengeAsyncWithHttpInfo(string appId,
            string challengeId, string language = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400,
                    "Missing required parameter 'appId' when calling ChallengesApi->CancelPersonalChallenge");
            // verify the required parameter 'challengeId' is set
            if (challengeId == null)
                throw new ApiException(400,
                    "Missing required parameter 'challengeId' when calling ChallengesApi->CancelPersonalChallenge");

            var localVarPath = $"/api/v1/challenges/personal/cancel/{appId}/{challengeId}";
            HttpMethod method = HttpMethod.Put;
            object body = null;

            ApiRequest request =
                Configuration.ApiClient.CreateBaseApiRequest(body, localVarPath, method, language);

            var responsePromise =
                Configuration.ApiClient.CallApi<ActionResponse>(request, ExceptionFactory, "CancelPersonalChallenge");
            return responsePromise;
        }

        public void ClaimPersonalChallengeRewardAsync(Action<ActionResponse> resolve, Action<Exception> reject,
            string appId, string challengeId,
            string language = null)
        {
            ClaimPersonalChallengeRewardAsync(appId, challengeId, language).Then(resolve).Catch(reject);
        }

        public IPromise<ActionResponse> ClaimPersonalChallengeRewardAsync(string appId, string challengeId,
            string language = null)
        {
            return ClaimPersonalChallengeRewardAsyncWithHttpInfo(appId, challengeId, language).ExtractResponseData();
        }

        public IPromise<ApiResponse<ActionResponse>> ClaimPersonalChallengeRewardAsyncWithHttpInfo(string appId,
            string challengeId, string language = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400,
                    "Missing required parameter 'appId' when calling ChallengesApi->ClaimPersonalChallengeReward");
            // verify the required parameter 'challengeId' is set
            if (challengeId == null)
                throw new ApiException(400,
                    "Missing required parameter 'challengeId' when calling ChallengesApi->ClaimPersonalChallengeReward");

            var localVarPath = $"/api/v1/challenges/personal/claim/{appId}/{challengeId}";

            HttpMethod method = HttpMethod.Put;
            object body = null;

            ApiRequest request =
                Configuration.ApiClient.CreateBaseApiRequest(body, localVarPath, method, language);

            var responsePromise =
                Configuration.ApiClient.CallApi<ActionResponse>(request, ExceptionFactory,
                    "ClaimPersonalChallengeReward");
            return responsePromise;
        }

        public void GenerateWebsocketAccessTokenAsync(Action<SocketToken> resolve, Action<Exception> reject)
        {
            GenerateWebsocketAccessTokenAsync().Then(resolve).Catch(reject);
        }

        public IPromise<SocketToken> GenerateWebsocketAccessTokenAsync()
        {
            return GenerateWebsocketAccessTokenAsyncWithHttpInfo().ExtractResponseData();
        }

        public IPromise<ApiResponse<SocketToken>> GenerateWebsocketAccessTokenAsyncWithHttpInfo()
        {
            var localVarPath = $"/api/v1/challenges/web-socket/generate-token";
            HttpMethod method = HttpMethod.Get;
            object body = null;

            ApiRequest request =
                Configuration.ApiClient.CreateBaseApiRequest(body, localVarPath, method);


            var responsePromise =
                Configuration.ApiClient.CallApi<SocketToken>(request, ExceptionFactory, "GenerateWebsocketAccessToken");
            return responsePromise;
        }

        public void GetActivePersonalChallengesAsync(Action<List<ChallengeCategory>> resolve, Action<Exception> reject,
            string appId,
            string language = null)
        {
            GetActivePersonalChallengesAsync(appId, language).Then(resolve).Catch(reject);
        }

        public IPromise<List<ChallengeCategory>> GetActivePersonalChallengesAsync(string appId, string language = null)
        {
            return GetActivePersonalChallengesAsyncWithHttpInfo(appId, language).ExtractResponseData();
        }

        public IPromise<ApiResponse<List<ChallengeCategory>>> GetActivePersonalChallengesAsyncWithHttpInfo(string appId,
            string language = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400,
                    "Missing required parameter 'appId' when calling ChallengesApi->GetActivePersonalChallenges");

            var localVarPath = $"/api/v1/challenges/personal/get-in-progress-challenges/{appId}";
            HttpMethod method = HttpMethod.Get;
            object body = null;

            ApiRequest request =
                Configuration.ApiClient.CreateBaseApiRequest(body, localVarPath, method, language);


            var responsePromise =
                Configuration.ApiClient.CallApi<List<ChallengeCategory>>(request, ExceptionFactory,
                    "GetActivePersonalChallenges");
            return responsePromise;
        }

        public void GetAllPersonalChallengesAsync(Action<List<ChallengeCategory>> resolve, Action<Exception> reject,
            string appId,
            List<string> includeCategories = null,
            List<string> excludeCategories = null, string language = null)
        {
            GetAllPersonalChallengesAsync(appId, includeCategories, excludeCategories, language).Then(resolve)
                .Catch(reject);
        }

        public IPromise<List<ChallengeCategory>> GetAllPersonalChallengesAsync(string appId,
            List<string> includeCategories = null, List<string> excludeCategories = null, string language = null)
        {
            return GetAllPersonalChallengesAsyncWithHttpInfo(appId, includeCategories, excludeCategories, language)
                .ExtractResponseData();
        }

        public IPromise<ApiResponse<List<ChallengeCategory>>> GetAllPersonalChallengesAsyncWithHttpInfo(string appId,
            List<string> includeCategories = null, List<string> excludeCategories = null, string language = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400,
                    "Missing required parameter 'appId' when calling ChallengesApi->GetAllPersonalChallenges");

            var localVarPath = $"/api/v1/challenges/personal/all/{appId}";

            HttpMethod method = HttpMethod.Get;
            object body = null;

            ApiRequest request =
                Configuration.ApiClient.CreateBaseApiRequest(body, localVarPath, method, language);

            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            if (includeCategories != null)
                localVarQueryParams.AddRange(
                    this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "include_categories",
                        includeCategories)); // query parameter
            if (excludeCategories != null)
                localVarQueryParams.AddRange(
                    this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "exclude_categories",
                        excludeCategories)); // query parameter
            request.QueryParams.AddRange(localVarQueryParams);


            var responsePromise =
                Configuration.ApiClient.CallApi<List<ChallengeCategory>>(request, ExceptionFactory,
                    "GetAllPersonalChallenges");
            return responsePromise;
        }

        public void GetPersonalChallengeByIdAsync(Action<Challenge> resolve, Action<Exception> reject, string appId,
            string challengeId,
            string language = null)
        {
            GetPersonalChallengeByIdAsync(appId, challengeId, language).Then(resolve).Catch(reject);
        }

        public IPromise<Challenge> GetPersonalChallengeByIdAsync(string appId, string challengeId,
            string language = null)
        {
            return GetPersonalChallengeByIdAsyncWithHttpInfo(appId, challengeId, language).ExtractResponseData();
        }

        public IPromise<ApiResponse<Challenge>> GetPersonalChallengeByIdAsyncWithHttpInfo(string appId,
            string challengeId, string language = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400,
                    "Missing required parameter 'appId' when calling ChallengesApi->GetPersonalChallengeById");
            // verify the required parameter 'challengeId' is set
            if (challengeId == null)
                throw new ApiException(400,
                    "Missing required parameter 'challengeId' when calling ChallengesApi->GetPersonalChallengeById");

            var localVarPath = $"/api/v1/challenges/personal/get/{appId}/{challengeId}";
            HttpMethod method = HttpMethod.Get;
            object body = null;

            ApiRequest request =
                Configuration.ApiClient.CreateBaseApiRequest(body, localVarPath, method, language);


            var responsePromise =
                Configuration.ApiClient.CallApi<Challenge>(request, ExceptionFactory, "GetPersonalChallengesById");
            return responsePromise;
        }

        public void GetPersonalChallengesAsync(Action<List<ChallengeCategory>> resolve, Action<Exception> reject,
            string appId,
            List<string> includeCategories = null,
            List<string> excludeCategories = null, string language = null)
        {
            GetPersonalChallengesAsync(appId, includeCategories, excludeCategories, language).Then(resolve)
                .Catch(reject);
        }

        public IPromise<List<ChallengeCategory>> GetPersonalChallengesAsync(string appId,
            List<string> includeCategories = null, List<string> excludeCategories = null, string language = null)
        {
            return GetPersonalChallengesAsyncWithHttpInfo(appId, includeCategories, excludeCategories, language)
                .ExtractResponseData();
        }

        public IPromise<ApiResponse<List<ChallengeCategory>>> GetPersonalChallengesAsyncWithHttpInfo(string appId,
            List<string> includeCategories = null, List<string> excludeCategories = null, string language = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400,
                    "Missing required parameter 'appId' when calling ChallengesApi->GetPersonalChallenges");

            var localVarPath = $"/api/v1/challenges/personal/get/{appId}";
            HttpMethod method = HttpMethod.Get;
            object body = null;

            ApiRequest request =
                Configuration.ApiClient.CreateBaseApiRequest(body, localVarPath, method, language);

            if (includeCategories != null)
                request.QueryParams.AddRange(
                    this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "include_categories",
                        includeCategories)); // query parameter
            if (excludeCategories != null)
                request.QueryParams.AddRange(
                    this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "exclude_categories",
                        excludeCategories)); // query parameter

            var responsePromise =
                Configuration.ApiClient.CallApi<List<ChallengeCategory>>(request, ExceptionFactory,
                    "GetPersonalChallenges");
            return responsePromise;
        }

        public void GetUnresolvedPersonalChallengesAsync(Action<List<ChallengeCategory>> resolve,
            Action<Exception> reject, string appId,
            List<string> includeCategories = null,
            List<string> excludeCategories = null, string language = null)
        {
            GetUnresolvedPersonalChallengesAsync(appId, includeCategories, excludeCategories, language).Then(resolve)
                .Catch(reject);
        }

        public IPromise<List<ChallengeCategory>> GetUnresolvedPersonalChallengesAsync(string appId,
            List<string> includeCategories = null, List<string> excludeCategories = null, string language = null)
        {
            return GetUnresolvedPersonalChallengesAsyncWithHttpInfo(appId, includeCategories, excludeCategories,
                language).ExtractResponseData();
        }

        public IPromise<ApiResponse<List<ChallengeCategory>>> GetUnresolvedPersonalChallengesAsyncWithHttpInfo(
            string appId, List<string> includeCategories = null, List<string> excludeCategories = null,
            string language = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400,
                    "Missing required parameter 'appId' when calling ChallengesApi->GetUnresolvedPersonalChallenges");

            var localVarPath = $"/api/v1/challenges/personal/unresolved/{appId}";

            HttpMethod method = HttpMethod.Get;
            object body = null;

            ApiRequest request =
                Configuration.ApiClient.CreateBaseApiRequest(body, localVarPath, method, language);

            if (includeCategories != null)
                request.QueryParams.AddRange(
                    this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "include_categories",
                        includeCategories)); // query parameter
            if (excludeCategories != null)
                request.QueryParams.AddRange(
                    this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "exclude_categories",
                        excludeCategories)); // query parameter

            var responsePromise =
                Configuration.ApiClient.CallApi<List<ChallengeCategory>>(request, ExceptionFactory,
                    "GetUnresolvedPersonalChallenges");
            return responsePromise;
        }

        public void UnlockPersonalChallengeAsync(Action<ActionResponse> resolve, Action<Exception> reject,
            string appId, string challengeId,
            string language = null)
        {
            UnlockPersonalChallengeAsync(appId, challengeId, language).Then(resolve).Catch(reject);
        }

        public IPromise<ActionResponse> UnlockPersonalChallengeAsync(string appId, string challengeId,
            string language = null)
        {
            return UnlockPersonalChallengeAsyncWithHttpInfo(appId, challengeId, language).ExtractResponseData();
        }

        public IPromise<ApiResponse<ActionResponse>> UnlockPersonalChallengeAsyncWithHttpInfo(string appId,
            string challengeId, string language = null)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400,
                    "Missing required parameter 'appId' when calling ChallengesApi->UnlockPersonalChallenge");
            // verify the required parameter 'challengeId' is set
            if (challengeId == null)
                throw new ApiException(400,
                    "Missing required parameter 'challengeId' when calling ChallengesApi->UnlockPersonalChallenge");

            var localVarPath = $"/api/v1/challenges/personal/unlock/{appId}/{challengeId}";

            HttpMethod method = HttpMethod.Post;
            object body = null;

            ApiRequest request =
                Configuration.ApiClient.CreateBaseApiRequest(body, localVarPath, method, language);

            var responsePromise =
                Configuration.ApiClient.CallApi<ActionResponse>(request, ExceptionFactory, "UnlockPersonalChallenge");
            return responsePromise;
        }
    }
}